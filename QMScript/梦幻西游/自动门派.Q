[General]
SyntaxVersion=2
BeginHotkey=120
BeginHotkeyMod=0
PauseHotkey=0
PauseHotkeyMod=0
StopHotkey=120
StopHotkeyMod=1
RunOnce=1
EnableWindow=
MacroID=dbfdfc4e-d548-448c-a25a-132ba9c1493f
Description=◊‘∂Ø√≈≈…
Enable=0
AutoRun=0
[Repeat]
Type=0
Number=1
[SetupUI]
Type=1
QUI=AutoProf
[Relative]
SetupOCXFile=
[Comment]

[Attachment]



[UIPackage]
UEsDBBQAAgAIANCsVUekvIZK3QUAAAhEAAAJABEAVUlQYWNrYWdlVVQNAAfQBShW0AUoVtAFKFbtWktTXEUUPheYwADhJa9AgiQxCcE8JOShJBIYIg8dSCoQF6nSqhsEQjnMUDODoiv/StYuNIu4dKGVUldqlYnlLv4DVm4swa/vg2mQSe7pbmhHOdShL8N0f/065/R3+paTLz/92PjswcOO32mbDFI5rW/E6YD0mROoJw1EZcHf6xsbG+HHG/tSUvIXtCJYQ7HWMWglNA6tglZDD0JroLXQOn/pqR7aCH0J2gRthrZCW6Bt0A5oO/QQtBN6BHoY2gXthr4cYK7vL4FVuU0Z/OSxJm9RGmWWPiGOtGLHhG05L/juZ4m738Rqf3bK8TzU5H92hyboNVKXKnKcEL+1yHeWO33cEF/+3wjNUFKjB9USfuwF+GEp/28G871MczRFLi2h5EoTlXn4jYHvjVqvIihDG9zX4vpfltFMdknD/Gh4JZ+5lc3Mq9Z3SE906+vKr7989cW3jx//oFqfYbK7Ul/V7xT8X9mWM1/UNasKnkXUcekepRT7UAf/VxOcU6Lil0n+711apBxUtQcNCuMvl/BvA9WlD+gm5iHFjL2h/68N2oyKXyHhzwB/FXFfY/0d7vhj0vqP4PSRgmYVe9KsgH9AGn8BP4F1mKUP+fjeebmeMf+V29Z/VnP+DwbzGRW/ivwzvCzvwSj+pNKTSsv4f+w8515YmpzunnbTue7puezi/C7hn/j8fa36d+F5svA/c/itIsL/tgQ2FXX/xaX9n4Tt8a1u6/5vCNqLil+9o/1Pox/3MQ+8aNgO+w85cFT8Ggl/GKf/ZS8GZKFp9IEXhVox/jj5vDwqfq2EP4qxp/X8Dzv+CX91bXP8KUTfBfRBzHtaxf+z8eu2rL+L+c+jD2IeEt46hJGgsDeKS49C/KmX8BNe+779RcHbYf85zVTIu0Wp0yDh6/oP3fOnroB7LGTncrmEm1WtPw+dRRNK9Uudv8xg5+e9s6/K7vP8D9v+GqX9dwv4q0BPkdr81yngN22xf5H/6dPwf44j+MRp8nOdO8le5H844xfxqiZ4tsH/miV8E/xP5JK7KHr8ayGj/M/pJp7/bSWz/E/k2tsY428ju/xPvi+ywf/aySz/E/cbxxnzf4jM8r+j5N+tRMXvoH/yP1VZW1vTqi9s8Rl0HE5UpSXb8bPcMr4u/zTA/9j+v5PM8r9XApuOin+YzPK/kyhPMPCPkFn+J9o7xsDvIrv8T8TrkP+J3bcYMD93k4ex5t/z/z2M8XeTWf51injx/yjJ5w8XmCt7ev4+JuHr+k9d/mibf06kl1fyicyqav1kZkGjtn3+WNh/CRpT2IMdCvvvOG3nXxc0/I9//34dz2eKfOd59/+m+NfrDP8j4lV4/2GDf4lYFb7XZYJ/idXrY4z/JJnlX/0o32DgnyKz/Ossyl4Gfg/9e/iXbdHtisgliPPcGPjDbwr1yyyP3zZ/MMC/2f7nNJnl3+dQXmbYXy+Z5d8XUZ5n4L9KBf5tg3+dIbP860owpqj4Z8ks/xJc4ioD/xyZ5V8DKC8x8M+TXf4l3nYM+Zft+2tdsc1feh/d16rf+WBGq75u/LJx/9pH8v2Pi/Nfjj4OeDhXmhTwL0j4k+A+KS/vkISm2WdQkX8W9jTIsP9+CX/KG/eSx8JU8w/c8V+U8MeB95Fy9sP3f28SL/9xaZv/m8Ua5PYw/3FZwhdRJ+shp4Lb/93f/1doO//tV7Zf8N9N/ESR74S8dzf57xRj/wuuHNvc/3vPfwVXNPn+6TjKMcb4B8gs/53w/Gh0/KsSftK9N5cidUlmFrSaKPX3Jx49/O7L7588/XpAsb7t/KeJ/McIyiHG/rtGdvMfIl7Fg2cb98+DZJb/3hB2yJj/62SW/75Nwo9Gxx8iu/x3mMzy38mgzaj4CTLKf739d5OBPyLht5D/PuwdKv7+0vOkguxKqd+/2xYT+Y9RlO8w9t8Nspv/EL7K5vvHoyTHP3/ec1gFsQbcPrQr4I+RnP9aAV4G3meRPlU7/7Pxxw37DS6+afm/4+9L6crfUEsBAhcLFAACAAgA0KxVR6S8hkrdBQAACEQAAAkACQAAAAAAAAAAAACAAAAAAFVJUGFja2FnZVVUBQAH0AUoVlBLBQYAAAAAAQABAEAAAAAVBgAAAAA=


[Script]
// ≤Œ ˝∂®“Â -------------------------------------------------------
Const WIN_VALID_TITLE = "øø∆◊÷˙ ÷"

// ◊¯±Í∂®“Â
Const REL_LEFT_BAR_POS_LEFT = 0
Const REL_LEFT_BAR_POS_TOP = 70
Const REL_LEFT_BAR_POS_RIGHT = 65
Const REL_LEFT_BAR_POS_BOTTOM = 230

Const REL_TOP_BAR_POS_LEFT = 180
Const REL_TOP_BAR_POS_TOP = 0
Const REL_TOP_BAR_POS_RIGHT = 470
Const REL_TOP_BAR_POS_BOTTOM = 70

Const REL_RIGHT_BAR_POS_LEFT = 730
Const REL_RIGHT_BAR_POS_TOP = 450
Const REL_RIGHT_BAR_POS_RIGHT = 800
Const REL_RIGHT_BAR_POS_BOTTOM = 600

Const REL_RIGHT_USER_POS_LEFT = 560
Const REL_RIGHT_USER_POS_TOP = 0
Const REL_RIGHT_USER_POS_RIGHT = 800
Const REL_RIGHT_USER_POS_BOTTOM = 80

Const REL_CENTER_MSGBOX_POS_LEFT = 200
Const REL_CENTER_MSGBOX_POS_TOP = 200
Const REL_CENTER_MSGBOX_POS_RIGHT = 600
Const REL_CENTER_MSGBOX_POS_BOTTOM = 400

Const REL_LEFT_TASKLIST_POS_LEFT = 15
Const REL_LEFT_TASKLIST_POS_TOP = 90
Const REL_LEFT_TASKLIST_POS_RIGHT = 150
Const REL_LEFT_TASKLIST_POS_BOTTOM = 350

Const REL_CENTER_TASKLIST_POS_LEFT = 150
Const REL_CENTER_TASKLIST_POS_TOP = 100
Const REL_CENTER_TASKLIST_POS_RIGHT = 770
Const REL_CENTER_TASKLIST_POS_BOTTOM = 420

Const REL_RIGHT_TASKLIST_POS_LEFT = 610
Const REL_RIGHT_TASKLIST_POS_TOP = 130
Const REL_RIGHT_TASKLIST_POS_RIGHT = 800
Const REL_RIGHT_TASKLIST_POS_BOTTOM = 400

Const REL_DIALOG_POS_LEFT = 530
Const REL_DIALOG_POS_TOP = 280
Const REL_DIALOG_POS_RIGHT = 780
Const REL_DIALOG_POS_BOTTOM = 460

// ≥£¡ø∂®“Â
Const PIC_MATCHED_PARAMS = 0.5
Const PIC_MATCHED_PARAMS_PRECISE = 0.9
Const PIC_MATCHED_CHECK_CNT_MAX = 10
Const PIC_MATCHED_CHECK_TIMEOUT = 500

Const COLORS_MATCHED_PARAMS_PRECISE = 0.6
Const COLORS_MATCHED_CHECK_CNT_MAX = 10
Const COLORS_MATCHED_CHECK_TIMEOUT = 500

Const NORMAL_CHECK_TIMEOUT = 500
Const RETRY_CNT_MAX = 3
Const STATUS_KEEP_CNT_MAX = 10
Const CHECK_WAIT_CNT_MAX = 10
Const SLIDE_MAX = 6
Const SLIDE_RANGE = 60

Const RET_SUCCESS_NORMAL = 0
Const RET_FAILED = - 1 
Const RET_SUCCESS_EXIT = 1

Const ENUM_DELAY_TYPE_TOO_SHORT = 0
Const ENUM_DELAY_TYPE_SHORT = 1
Const ENUM_DELAY_TYPE_NORMAL_SHORTER = 2
Const ENUM_DELAY_TYPE_NORMAL = 3
Const ENUM_DELAY_TYPE_LONG = 4
Const ENUM_DELAY_TYPE_TOO_LONG = 5

Const ENUM_LOG_LEVEL_ERR = 0
Const ENUM_LOG_LEVEL_WARN = 1
Const ENUM_LOG_LEVEL_INFO = 2
Const ENUM_LOG_LEVEL_DEBUG = 3

Const ENUM_STATUS_UNKNOWN = -1
Const ENUM_STATUS_IDLE = 0
Const ENUM_STAUTS_BATTLE = 1
Const ENUM_STATUS_LOADING_MAP = 2
Const ENUM_STATUS_IDEL_WITH_CLOSE = 3
Const ENUM_STATUS_HAS_PROF_TASK = 4
Const ENUM_STATUS_HAS_NEXT_LOOP_TASK = 5
Const ENUM_STATUS_CONFIRM_BATTLE = 6
Const ENUM_STATUS_CONFIRM_CONTINUE = 7
Const ENUM_STATUS_GET_PROF_TASK = 8

// Ã· æº∞¥ÌŒÛ∂®“Â --------------------------------------------------
Const ERR_NONE = "◊ΩπÌ»ŒŒÒ÷¥––ÕÍ±œ"
Const ERR_INVALID_WINDOW = "‘À–– ß∞‹, ∑«∑®µƒ≥Ã–Ú¥∞ø⁄"
Const ERR_BACK_IDEL_FAILED = "ªÿµΩø’œ–ΩÁ√Ê ß∞‹"
Const ERR_RUN_PROF_TASK_FAILED = "◊‘∂Ø√≈≈…»ŒŒÒ ß∞‹"

// ∂‡…´∆•≈‰≤Œ ˝∂®“Â ------------------------------------------------
Const FLAG_USER_COLORBASE = "0E2FE9"
Const FLAG_USER_COLORLIST = "0|12|F48D1B,2|6|D7E7F4"
Const MSGBOX_EXITGAME_COLORBASE = "6FACDD"
Const MSGBOX_EXITGAME_COLORLIST = "11|7|80B8E1,22|20|8CBDE3,12|17|A1CBE8,19|13|A1CAE7,19|134|8CBDE3,17|146|A1CCE9,12|137|A4CDE9,335|147|9ECBE8,345|137|A0CCE9,342|112|B5D5EB,346|86|ADD2EA,340|57|B8D6EB,244|55|6B8FB2,244|53|2C5D8D,242|51|396795,229|54|396795,226|54|5880A7,213|51|45719C,216|51|4E78A1,175|53|46729C,178|53|2F608F,178|53|2F608F,191|56|30608F,193|56|366593,193|56|366593,125|116|64C4EA,110|115|2A4862,110|111|22374F,250|120|25415B,251|118|3D7494,257|118|5FC1E9,266|117|223952,266|119|21364F"
Const TASK_DAYLY_COLORBASE = "0D346E"
Const TASK_DAYLY_COLORLIST = "2|0|0D346E,4|0|0D346E,6|0|0D346E,0|7|123871,3|7|123871,7|7|123871,0|15|163D75,3|15|163D75,8|15|163D75,24|2|1A3F77,24|11|0B326C,20|11|183E76,28|11|183E76,47|4|0E346E,43|4|1B4178,49|4|1B4178,47|15|173D75,67|3|0E356F,58|6|0D346E,60|6|133972,72|8|123972,72|10|113871"

Const TASK_LIST_PROF_COLORBASE = "1CE4EE"
Const TASK_LIST_PROF_COLORLIST = "13|-1|1BDFEA,25|0|1CE7F1,36|1|1CEDF7,61|-1|1CF1FA,158|2|2D5181,164|4|C1D5E8"

// Ω¯∂»œ‡πÿ∂®“Â
Global gProcessLevel
Global gLastProcess

// Õ®”√∫Ø ˝∂®“Â ----------------------------------------------------
Function getRandom(m,n)
    Randomize
    getRandom = Int(((n-m+1) * Rnd) + m)
End Function

Function delayAsManual(delayType)
    Select Case delayType  
    Case ENUM_DELAY_TYPE_TOO_SHORT
        Delay 200 + getRandom(-50, 50)
    Case ENUM_DELAY_TYPE_SHORT   
        Delay 700 + getRandom(-250 , 250)
    Case ENUM_DELAY_TYPE_NORMAL_SHORTER   
        Delay 1200 + getRandom(-250, 250)  
    Case ENUM_DELAY_TYPE_NORMAL  
        Delay 2000 + getRandom(-250, 250)   
    Case ENUM_DELAY_TYPE_LONG   
        Delay 3000 + getRandom(-250, 250)   
    Case ENUM_DELAY_TYPE_TOO_LONG   
        Delay 5000 + getRandom(-250, 250)
    Case Else  
        Delay 5000 + getRandom(-5000, 5000)
    End Select  
End Function

Function clickAsManual(x, y, rndXMin, rndXMax, rndYMin, rndYMax)
    MoveTo x + getRandom(rndXMin, rndXMax), y + getRandom(rndYMin, rndYMax)
    LeftClick 1
End Function

Function slideDownAsManual(hWnd, left, top, right, bottom, downRange)
    Dim posX, posY
    posX = left + getRandom(0, right - left)
    posY = top + getRandom(downRange, bottom - top)
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY	
    LeftDown 1
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY - downRange 
    LeftUp 1
    Delay delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
End Function

Function slideUpAsManual(hWnd, left, top, right, bottom, upRange)
    Dim posX, posY
    posX = left + getRandom(0, right - left)
    posY = top + getRandom(0, bottom - top - upRange)
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY
    LeftDown 1
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY + upRange 
    LeftUp 1
    Delay delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
End Function

Function checkPicIsFound(hWnd, left, top, right, bottom, picName, matchParam)
    FindPic left, top, right, bottom, _
		CStr(picName), _
		matchParam, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        checkPicIsFound = TRUE
        Exit Function
    End If	
    checkPicIsFound = FALSE
End Function

Function checkPicIsFoundExSlide(hWnd, left, top, right, bottom, picName, matchParam)
    For SLIDE_MAX
        FindPic left, top, right, bottom, _
		CStr(picName), _
		matchParam, matchedX, matchedY
        If matchedX <> -1 And matchedY <> -1 Then 
            checkPicIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideDownAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  - SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    For SLIDE_MAX
        FindPic left, top, right, bottom, _
		CStr(picName), _
		matchParam, matchedX, matchedY
        If matchedX <> -1 And matchedY <> -1 Then 
            checkPicIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideUpAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  + SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    checkPicIsFoundExSlide = FALSE
End Function

Function checkColorIsFound(hWnd, left, top, right, bottom, colorBase, colorList, matchParam)
    posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
		colorBase, colorList, matchParam)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        checkColorIsFound = TRUE
        Exit Function
    End If
    checkColorIsFound = FALSE
End Function

Function checkColorIsFoundExSlide(hWnd, left, top, right, bottom, colorBase, colorList, matchParam)
    For SLIDE_MAX
        posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
        xyArray = Split(posXY, "|")
        matchedX = CInt(xyArray(0))
        matchedY = CInt(xyArray(1))
        If matchedX <> -1 And matchedY <> -1 Then 
            checkColorIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideDownAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  - SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    For SLIDE_MAX
        posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
        xyArray = Split(posXY, "|")
        matchedX = CInt(xyArray(0))
        matchedY = CInt(xyArray(1))
        If matchedX <> -1 And matchedY <> -1 Then 
            checkColorIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideUpAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  + SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    checkColorIsFoundExSlide = FALSE
End Function

Function showMsgBox(msgContent)
    MessageBox msgContent
End Function

Function logClear()
    AutoProf.LogBox.text = ""
End Function

Function logRecord(logLevel, logContent)
    Dim logline
    Select Case logLevel
    Case ENUM_LOG_LEVEL_ERR
        logline = "¥ÌŒÛ"
    Case ENUM_LOG_LEVEL_WARN
        logline = "æØ∏Ê"
    Case ENUM_LOG_LEVEL_INFO
        logline = "–≈œ¢"
    Case ENUM_LOG_LEVEL_DEBUG
        logline = "µ˜ ‘"
    Case Else  
        logline = "»’÷æ"	
    End Select
    logline = logline + "[" + CStr(Hour(now)) + ":" + CStr(Minute(now)) + ":" + CStr(Second(now)) + "]"
    logline = logline + "------" + CStr(logContent)
    TracePrint logline
    AutoProf.LogBox.text = logline + vbcrlf + AutoProf.LogBox.text
End Function

Function processClear()
    gLastProcess = 0
    AutoProf.ProfProcess.Value = 0
End Function

Function setProcessLevel(curLevel)
    If curLevel < 0 Then 
        gProcessLevel = 0
    Else 
        gProcessLevel = curLevel
    End If
End Function

Function showProcess()
    Dim PROCESS_MAX
    Dim curProcess
    Dim processLevelArr
    PROCESS_MAX = 1000
    processLevelArr = Array(20, 200, 500, 700, 980, PROCESS_MAX)
    For i = 1 To UBound(processLevelArr)
        If i - 1 = gProcessLevel Then 
            curProcess = gLastProcess + 1
            If curProcess > processLevelArr(i - 1) Then 
                curProcess = processLevelArr(i - 1)
            End If
            gLastProcess = curProcess
            AutoProf.ProfProcess.Value = 100 * curProcess / PROCESS_MAX
            showProcess = TRUE
            Exit Function	
        ElseIf i = gProcessLevel Then
            curProcess = gLastProcess + 1
            If curProcess < processLevelArr(i - 1) Then 
                curProcess = processLevelArr(i - 1)
            ElseIf curProcess > processLevelArr(i) Then
                curProcess = processLevelArr(i)
            End If
            gLastProcess = curProcess
            AutoProf.ProfProcess.Value = 100 * curProcess / PROCESS_MAX
            showProcess = TRUE
            Exit Function
        End If
    Next
    AutoProf.ProfProcess.Value = 100
    showProcess = FALSE
End Function

Function clickPicWhenFound(hWnd, left, top, right, bottom, _
	picName, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)	
    If TRUE <> checkPicIsFound(hWnd, _
			left, top, right, bottom, _
			picName, matchParam) Then
        clickPicWhenFound = FALSE
        Exit Function
    End If
    FindPic left, top, right, bottom, _
			picName, matchParam, matchedX, matchedY
    If matchedX = -1 Or matchedY = -1 Then 
        clickPicWhenFound = FALSE
        Exit Function
    End If
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickPicWhenFound = TRUE
End Function
	
Function clickPicWhenFoundExSlide(hWnd, left, top, right, bottom, _
	picName, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)	
    If TRUE <> checkPicIsFoundExSlide(hWnd, _
			left, top, right, bottom, _
			picName, matchParam) Then
        clickPicWhenFoundExSlide = FALSE
        Exit Function
    End If
    FindPic left, top, right, bottom, _
			picName, matchParam, matchedX, matchedY
    If matchedX = -1 Or matchedY = -1 Then 
        clickPicWhenFoundExSlide = FALSE
        Exit Function
    End If
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickPicWhenFoundExSlide = TRUE
End Function

Function clickColorsWhenFound(hWnd, left, top, right, bottom, _
	colorBase, colorList, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)
    If TRUE <> checkColorIsFound(hWnd, _
			left, top, right, bottom, _
			colorBase, colorList, matchParam) Then
        clickColorsWhenFound = FALSE
        Exit Function
    End If
    posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        clickColorsWhenFound = FALSE
        Exit Function
    End If
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickColorsWhenFound = TRUE
End Function
	
Function clickColorsWhenFoundExSlide(hWnd, left, top, right, bottom, _
	colorBase, colorList, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)
    If TRUE <> checkColorIsFoundExSlide(hWnd, _
			left, top, right, bottom, _
			colorBase, colorList, matchParam) Then
        clickColorsWhenFoundExSlide = FALSE
        Exit Function
    End If
    posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        clickColorsWhenFoundExSlide = FALSE
        Exit Function
    End If
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickColorsWhenFoundExSlide = TRUE
End Function

// ∫Ø ˝∂®“Â --------------------------------------------------------
Function isWndInvalid(hWnd)
    sTitle = Plugin.Window.GetText(Hwnd)
    If 0 < InStr(sTitle, WIN_VALID_TITLE) Then 
        isWndInvalid = FALSE
        Exit Function
    End If
    isWndInvalid = TRUE
End Function

Function getCurStatus(hWnd, left, top, right, bottom)  
    //  «∑Ò”–»∑»œ’Ω∂∑µƒ∂‘ª∞øÚ
    FindPic left, top, right, bottom, _
		"Attachment:\Confirm_Ω¯»Î’Ω∂∑.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurStatus = ENUM_STATUS_CONFIRM_BATTLE
        Exit Function
    End If
    
    
    //  «∑Ò”––Ë“™Closeµƒ∂´Œ˜
    FindPic left, top, right, bottom, _
		"Attachment:\Close.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurStatus = ENUM_STATUS_IDEL_WITH_CLOSE
        Exit Function
    End If
    
    FindPic left, top, right, bottom, _
		"Attachment:\Close_Small.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurStatus = ENUM_STATUS_IDEL_WITH_CLOSE
        Exit Function
    End If
    
    
    //  «∑Ò‘⁄º”‘ÿµÿÕº
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_USER_POS_LEFT, _
		top + REL_RIGHT_USER_POS_TOP, _
		left + REL_RIGHT_USER_POS_RIGHT, _
		bottom + REL_RIGHT_USER_POS_BOTTOM, _
		FLAG_USER_COLORBASE, FLAG_USER_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        getCurStatus = ENUM_STATUS_LOADING_MAP
        Exit Function
    End If
    
        
    //  «∑Ò‘⁄’Ω∂∑÷–
    FindPic left + REL_TOP_BAR_POS_LEFT, _
		top + REL_TOP_BAR_POS_TOP, _
		left + REL_TOP_BAR_POS_RIGHT, _
		top + REL_TOP_BAR_POS_BOTTOM, _
		"Attachment:\Idle_π“ª˙.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX = -1 And matchedY = -1 Then 
        getCurStatus = ENUM_STAUTS_BATTLE
        Exit Function
    End If
    
	//  «∑Òµ±«∞”–√≈≈…»ŒŒÒ
	posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASK_LIST_PROF_COLORBASE, TASK_LIST_PROF_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurStatus = ENUM_STATUS_HAS_PROF_TASK
        Exit Function
    End If
	

    //  «∑Ò¥¶”⁄IdleΩÁ√Ê
    FindPic left+REL_LEFT_BAR_POS_LEFT, _
		top+REL_LEFT_BAR_POS_TOP, _
		left+REL_LEFT_BAR_POS_RIGHT, _
		top+REL_LEFT_BAR_POS_BOTTOM, _
		"Attachment:\Idle_…Ã≥«.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 Or matchedY <> -1 Then 
        FindPic left+REL_LEFT_BAR_POS_LEFT, _
		top+REL_LEFT_BAR_POS_TOP, _
		left+REL_LEFT_BAR_POS_RIGHT, _
		top+REL_LEFT_BAR_POS_BOTTOM, _
		"Attachment:\Idle_∏£¿˚.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
        If matchedX <> - 1  Or matchedY <> - 1  Then 
            getCurStatus = ENUM_STATUS_IDLE
            Exit Function
        End If
    End If
    getCurStatus = ENUM_STATUS_UNKOWN
End Function

Function clickProfTask(hWnd, left, top, right, bottom)
	//  «∑Òµ±«∞”–√≈≈…»ŒŒÒ
	posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASK_LIST_PROF_COLORBASE, TASK_LIST_PROF_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 0, 160, 0, 50)
        clickProfTask = TRUE
        Exit Function
    End If
    
    clickProfTask = FALSE
End Function

Function confirmToBattle(hWnd, left, top, right, bottom)
	//  «∑Ò”–»∑»œ’Ω∂∑µƒ∂‘ª∞øÚ
    FindPic left, top, right, bottom, _
		"Attachment:\Confirm_Ω¯»Î’Ω∂∑.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 0, 200, 0, 30)
        confirmToBattle = TRUE
        Exit Function
    End If
    
    confirmToBattle = FALSE
End Function

Function handlerShortStatus(hWnd, left, top, right, bottom, status)
	Select Case status
    Case ENUM_STATUS_IDLE
        Call logRecord(ENUM_LOG_LEVEL_INFO, "ø’œ–◊¥Ã¨")
        
    Case ENUM_STAUTS_BATTLE
        Call logRecord(ENUM_LOG_LEVEL_INFO, "’Ω∂∑÷–")
        
    Case ENUM_STATUS_LOADING_MAP
    	Call logRecord(ENUM_LOG_LEVEL_INFO, "º”‘ÿµÿÕº÷–")
        
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerShortStatus = RET_FAILED
            Exit Function
        End If
        
	Case ENUM_STATUS_HAS_PROF_TASK
		If TRUE <> clickProfTask(hWnd, left, top, right, bottom) Then 
            handlerShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_HAS_NEXT_LOOP_TASK
    	Call logRecord(ENUM_LOG_LEVEL_INFO, "”µ”–œ¬“ª¬÷...")
        
    Case ENUM_STATUS_CONFIRM_BATTLE
    	// Call logRecord(ENUM_LOG_LEVEL_INFO, "»∑»œ’Ω∂∑...")
    	If TRUE <> confirmToBattle(hWnd, left, top, right, bottom) Then 
            handlerShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_CONFIRM_CONTINUE
    	Call logRecord(ENUM_LOG_LEVEL_INFO, "»∑»œºÃ–¯œ¬“ª¬÷...")
        
    Case ENUM_STATUS_GET_PROF_TASK
    	Call logRecord(ENUM_LOG_LEVEL_INFO, "¡Ï»°√≈≈…»ŒŒÒ...")
        
    Case Else
        Call logRecord(ENUM_LOG_LEVEL_INFO, "Œ¥÷™")
        
    End Select
    
    handlerShortStatus = RET_SUCCESS_NORMAL
End Function

Function runAutoProf(hWnd, left, top, right, bottom)
    Dim curFailedNum 
    Dim curStatus, lastStatus, curStatusCnt
    curFailedNum = 0
    curStatusCnt = 0
    
    While TRUE
    	curStatus = getCurStatus(hWnd, left, top, right, bottom)
        
        // ∂Ã‘›◊¥Ã¨¥¶¿Ì
        Select Case handlerShortStatus(hWnd, left, top, right, bottom, curStatus)
        Case RET_SUCCESS_EXIT
        	runAutoGhost = TRUE
            Exit Function
            
        Case RET_SUCCESS_NORMAL
            // Do nothing
            
        Case RET_FAILED
            curFailedNum = curFailedNum + 1
            
        Case Else
            curFailedNum = curFailedNum + 1
            
        End Select
        
        // ◊¥Ã¨º«¬º”Î≥÷–¯¥Œ ˝Õ≥º∆
        If lastStatus <> curStatus Then 
        	lastStatus = curStatus
        	curStatusCnt = 0
        Else 
        	curStatusCnt = curStatusCnt + 1
        End If

        // ≈–∂œ «∑ÒŒ™≥÷–¯◊¥Ã¨
        If curStatusCnt > STATUS_KEEP_CNT_MAX Then 
        	curStatusCnt = 0
        	/*
        	// ≥÷–¯◊¥Ã¨¥¶¿Ì
        	Select Case handlerLongStatus(hWnd, left, top, right, bottom, curStatus)
        	Case RET_SUCCESS_EXIT
        		runAutoGhost = TRUE
            	Exit Function
            	
            Case RET_SUCCESS_NORMAL
            	// Do nothing
            	
            Case RET_FAILED
            	curFailedNum = curFailedNum + 1
            	
            Case Else
            	curFailedNum = curFailedNum + 1
            End Select
            */
        End If
        
        If curFailedNum > RETRY_CNT_MAX Then 
            // ¥ÌŒÛπ˝∂‡¥¶¿Ì
            Call logRecord(ENUM_LOG_LEVEL_WARN, "¥ÌŒÛπ˝∂‡, Õ£÷π◊‘∂Ø◊ΩπÌ")
            runAutoGhost = FALSE
            Exit Function
        End If
        
        // ÀÊª˙º‰∏ÙºÏ≤‚
        Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Wend
    runAutoGhost = TRUE
End Function

Function main()
    hCurWnd = Plugin.Window.GetKeyFocusWnd()
    If isNull(hCurWnd) Then
        Call logRecord(ENUM_LOG_LEVEL_ERR, ERR_INVALID_WINDOW)
        main = FALSE
        Exit Function
    End If
    
    sCurRect =Plugin.Window.GetClientRect(hCurWnd)
    If -1 = sCurRect Then
        Call logRecord(ENUM_LOG_LEVEL_ERR, ERR_INVALID_WINDOW)
        main = FALSE
        Exit Function
    End If
    
    arrRect = Split(sCurRect, "|")
    posLeft = Clng(arrRect(0))
    posTop = Clng(arrRect(1))
    posRight = Clng(arrRect(2))
    posBottom = Clng(arrRect(3))
    Call logRecord(ENUM_LOG_LEVEL_DEBUG, "¥∞ø⁄◊¯±ÍŒ™ " + _
		arrRect(0) + " " + arrRect(1) + " " + _
		arrRect(2) + " " + arrRect(3))
    If isWndInvalid(hCurWnd) Then 
        Call logRecord(ENUM_LOG_LEVEL_ERR, ERR_INVALID_WINDOW)
        main = FALSE
        Exit Function
    End If
    
    // ◊‘∂Ø√≈≈…
    Call logRecord(ENUM_LOG_LEVEL_INFO, "◊‘∂Ø√≈≈…»ŒŒÒ...")
    If TRUE <> runAutoProf(hCurWnd, posLeft, posTop, posRight, posBottom) Then 
        Call logRecord(ENUM_LOG_LEVEL_ERR, ERR_RUN_PROF_TASK_FAILED)
        main = FALSE
        Exit Function
    End If
End Function

// ÷˜≥Ã–Ú ----------------------------------------------------------
Sub fakeProcess()
    setProcessLevel(0)
    While showProcess()
        Delay NORMAL_CHECK_TIMEOUT
    Wend
End Sub

Call logClear()
Call processClear()
Call logRecord(ENUM_LOG_LEVEL_INFO, "√≈≈…≥Ã–Úø™ º÷¥––")
//BeginThread fakeProcess()
Call main()
Call setProcessLevel(100)
Call logRecord(ENUM_LOG_LEVEL_INFO, "√≈≈…≥Ã–Ú÷¥––ÕÍ±œ")
