[General]
SyntaxVersion=2
BeginHotkey=113
BeginHotkeyMod=0
PauseHotkey=0
PauseHotkeyMod=0
StopHotkey=113
StopHotkeyMod=1
RunOnce=1
EnableWindow=
MacroID=23df4979-ba83-49ff-85e3-c6e332c8009d
Description=¶ÓÎéÄ£Ê½
Enable=0
AutoRun=0
[Repeat]
Type=0
Number=1
[SetupUI]
Type=1
QUI=TeamMode
[Relative]
SetupOCXFile=
[Comment]

[Attachment]



[UIPackage]
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


[Script]
// ²ÎÊý¶¨Òå -------------------------------------------------------
Const WIN_VALID_TITLE = "¿¿Æ×ÖúÊÖ"

// ×ø±ê¶¨Òå
Const REL_LEFT_BAR_POS_LEFT = 0
Const REL_LEFT_BAR_POS_TOP = 70
Const REL_LEFT_BAR_POS_RIGHT = 65
Const REL_LEFT_BAR_POS_BOTTOM = 230

Const REL_TOP_BAR_POS_LEFT = 180
Const REL_TOP_BAR_POS_TOP = 0
Const REL_TOP_BAR_POS_RIGHT = 470
Const REL_TOP_BAR_POS_BOTTOM = 70

Const REL_RIGHT_BAR_POS_LEFT = 730
Const REL_RIGHT_BAR_POS_TOP = 450
Const REL_RIGHT_BAR_POS_RIGHT = 800
Const REL_RIGHT_BAR_POS_BOTTOM = 600

Const REL_RIGHT_USER_POS_LEFT = 560
Const REL_RIGHT_USER_POS_TOP = 0
Const REL_RIGHT_USER_POS_RIGHT = 800
Const REL_RIGHT_USER_POS_BOTTOM = 80

Const REL_CENTER_MSGBOX_POS_LEFT = 200
Const REL_CENTER_MSGBOX_POS_TOP = 200
Const REL_CENTER_MSGBOX_POS_RIGHT = 600
Const REL_CENTER_MSGBOX_POS_BOTTOM = 400

Const REL_LEFT_TASKLIST_POS_LEFT = 15
Const REL_LEFT_TASKLIST_POS_TOP = 90
Const REL_LEFT_TASKLIST_POS_RIGHT = 150
Const REL_LEFT_TASKLIST_POS_BOTTOM = 350

Const REL_TOP_TASKLIST_POS_LEFT = 20
Const REL_TOP_TASKLIST_POS_TOP = 60
Const REL_TOP_TASKLIST_POS_RIGHT = 560
Const REL_TOP_TASKLIST_POS_BOTTOM = 140

Const REL_CENTER_TASKLIST_POS_LEFT = 150
Const REL_CENTER_TASKLIST_POS_TOP = 100
Const REL_CENTER_TASKLIST_POS_RIGHT = 770
Const REL_CENTER_TASKLIST_POS_BOTTOM = 420

Const REL_RIGHT_LIST_TAB_POS_LEFT = 560
Const REL_RIGHT_LIST_TAB_POS_TOP = 80
Const REL_RIGHT_LIST_TAB_POS_RIGHT = 800
Const REL_RIGHT_LIST_TAB_POS_BOTTOM = 130

Const REL_RIGHT_TASKLIST_POS_LEFT = 610
Const REL_RIGHT_TASKLIST_POS_TOP = 130
Const REL_RIGHT_TASKLIST_POS_RIGHT = 800
Const REL_RIGHT_TASKLIST_POS_BOTTOM = 400

Const REL_DIALOG_POS_LEFT = 530
Const REL_DIALOG_POS_TOP = 280
Const REL_DIALOG_POS_RIGHT = 780
Const REL_DIALOG_POS_BOTTOM = 460

// ³£Á¿¶¨Òå
Const SUPPORT_TASK_NUMBER = 3
Const TASKID_FB_DEMON = 0
Const TASKID_FB_HELL = 1
Const TASKID_FB_GHOST = 2

Const PIC_MATCHED_PARAMS = 0.5
Const PIC_MATCHED_PARAMS_PRECISE = 0.9
Const PIC_MATCHED_CHECK_CNT_MAX = 10
Const PIC_MATCHED_CHECK_TIMEOUT = 500

Const COLORS_MATCHED_PARAMS_PRECISE = 0.6
Const COLORS_MATCHED_CHECK_CNT_MAX = 10
Const COLORS_MATCHED_CHECK_TIMEOUT = 500

Const NORMAL_CHECK_TIMEOUT = 500
Const RETRY_CNT_MAX = 10
Const STATUS_KEEP_CNT_MAX = 10
Const CHECK_WAIT_CNT_MAX = 10

Const SLIDE_MAX = 6
Const SLIDE_RANGE = 60

Const RET_SUCCESS_NORMAL = 0
Const RET_FAILED = - 1 
Const RET_SUCCESS_EXIT = 1

Const ENUM_DELAY_TYPE_TOO_SHORT = 0
Const ENUM_DELAY_TYPE_SHORT = 1
Const ENUM_DELAY_TYPE_NORMAL_SHORTER = 2
Const ENUM_DELAY_TYPE_NORMAL = 3
Const ENUM_DELAY_TYPE_LONG = 4
Const ENUM_DELAY_TYPE_TOO_LONG = 5

Const ENUM_LOG_LEVEL_ERR = 0
Const ENUM_LOG_LEVEL_WARN = 1
Const ENUM_LOG_LEVEL_INFO = 2
Const ENUM_LOG_LEVEL_DEBUG = 3

Const ENUM_STATUS_UNKNOWN = -1
Const ENUM_STATUS_IDLE = 0
Const ENUM_STAUTS_BATTLE = 1
Const ENUM_STATUS_LOADING_MAP = 2
Const ENUM_STATUS_HAS_GHOST_TASK = 3
Const ENUM_STATUS_HAS_GHOSTKING_TASK = 4
Const ENUM_STATUS_CONTINUE_CONFIRM = 5
Const ENUM_STATUS_IDEL_WITH_CLOSE = 6
Const ENUM_STATUS_CONFIRM_GET_GHOST_TASK = 7
Const ENUM_STATUS_TEAM_LIST = 8
Const ENUM_STATUS_HIDE_LIST = 9
Const ENUM_STATUS_DIALOG_TASK = 10
Const ENUM_STATUS_DIALOG_TASK_DAYLY = 11
// ¸±±¾Ïà¹Ø×´Ì¬
Const ENUM_STATUS_DIALOG_FB_CONFIRM = 12
Const ENUM_STATUS_IN_FB_NORMAL = 13
Const ENUM_STATUS_IN_FB_HERO = 14      // Ô¤Áô, ÔÝ²»Ö§³ÖÏÀÒå±¾
Const ENUM_STATUS_HAS_FB_TASK = 15
Const ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE = 16
Const ENUM_STATUS_HAS_FB_FINISHED = 17
Const ENUM_STATUS_HAS_OTHER_CONFIRM = 18
Const ENUM_STATUS_LOADING_STORY = 19


// ¶àÉ«Æ¥Åä²ÎÊý¶¨Òå ------------------------------------------------
Const FLAG_USER_COLORBASE = "0E2FE9"
Const FLAG_USER_COLORLIST = "0|12|F48D1B,2|6|D7E7F4"

Const MSGBOX_EXITGAME_COLORBASE = "6FACDD"
Const MSGBOX_EXITGAME_COLORLIST = "11|7|80B8E1,22|20|8CBDE3,12|17|A1CBE8,19|13|A1CAE7,19|134|8CBDE3,17|146|A1CCE9,12|137|A4CDE9,335|147|9ECBE8,345|137|A0CCE9,342|112|B5D5EB,346|86|ADD2EA,340|57|B8D6EB,244|55|6B8FB2,244|53|2C5D8D,242|51|396795,229|54|396795,226|54|5880A7,213|51|45719C,216|51|4E78A1,175|53|46729C,178|53|2F608F,178|53|2F608F,191|56|30608F,193|56|366593,193|56|366593,125|116|64C4EA,110|115|2A4862,110|111|22374F,250|120|25415B,251|118|3D7494,257|118|5FC1E9,266|117|223952,266|119|21364F"

Const TASK_DAYLY_COLORBASE = "0D346E"
Const TASK_DAYLY_COLORLIST = "2|0|0D346E,4|0|0D346E,6|0|0D346E,0|7|123871,3|7|123871,7|7|123871,0|15|163D75,3|15|163D75,8|15|163D75,24|2|1A3F77,24|11|0B326C,20|11|183E76,28|11|183E76,47|4|0E346E,43|4|1B4178,49|4|1B4178,47|15|173D75,67|3|0E356F,58|6|0D346E,60|6|133972,72|8|123972,72|10|113871"

Const TASK_DAYLY_GHOST_COLORBASE = "942884"
Const TASK_DAYLY_GHOST_COLORLIST = "0|-6|EFB2F7,-6|-11|73EFFF,-8|17|107539,-4|14|8C347B,194|9|5ABEEF"

Const TASK_DAYLY_FB_COMMON_COLORBASE = "EFBA94"
Const TASK_DAYLY_FB_COMMON_COLORLIST = "25|2|843C39,10|7|B56152,-9|9|FFFFFF,10|-18|946563,-8|-1|4A1408"

Const TASK_DAYLY_FB_DEMON_COLORBASE = "DEA67B"
Const TASK_DAYLY_FB_DEMON_COLORLIST = "11|-19|946563,-10|16|D6A67B,6|7|BD6D5A,70|-21|213852,112|-11|293C5A,175|-9|C6DBEF"

Const TASK_DAYLY_FB_HELL_COLORBASE = "E7B28C"
Const TASK_DAYLY_FB_HELL_COLORLIST = "12|-19|946563,-8|15|B5825A,25|2|9C595A,77|-16|425573,107|-11|213C52,181|-10|C6DBEF"

Const TASK_DAYLY_FB_OTHERS_COLORBASE = "18EBF7"
Const TASK_DAYLY_FB_OTHERS_COLORLIST = "9|-1|18E7EF,26|4|21DFE7,43|12|18EBF7,59|8|18EFF7,156|10|315584,151|8|CEDFEF"

Const TASKLIST_GHOST_COLORBASE = "1CF2FB"
Const TASKLIST_GHOST_COLORLIST = "8|7|1DDFE8,23|2|1CEEF7,157|9|3E6596,154|4|DCE9F5"

Const TASKLIST_GHOSTKING_COLORBASE = "1DEDF5"
Const TASKLIST_GHOSTKING_COLORLIST = "-5|-6|1DE8F1,19|-2|1CF2FB,36|0|1DEEF7,55|0|1FE8F1,152|4|315482,157|2|A7CAE3"

Const TASKLIST_FB_DEMON_COLORBASE = "18DFE7"
Const TASKLIST_FB_DEMON_COLORLIST = "-3|9|18D7DE,24|-1|18F3FF,30|0|18EBF7,60|2|21DFE7,152|6|315584,148|1|DEEBF7"

Const TASKLIST_FB_HELL_COLORBASE = "18F3FF"
Const TASKLIST_FB_HELL_COLORLIST = "5|5|18EBF7,27|-3|18E3EF,45|0|18EBF7,158|7|315584,153|6|C6DBEF"

// ÌìÅîÏÂ·²
Const TASKLIST_FB_TPXF_COLORBASE = "18E7EF"
Const TASKLIST_FB_TPXF_COLORLIST = "14|5|18E7EF,43|-6|18E7EF,153|5|315584,148|5|C6DBEF"

// Á½½çÉ½
Const TASKLIST_FB_LJS_COLORBASE = "18E3EF"
Const TASKLIST_FB_LJS_COLORLIST = "7|-6|18E7EF,24|0|18F3FF,36|8|18D3DE,153|5|21497B,149|0|E7EFF7"

// Í¨ÓÃº¯Êý¶¨Òå ----------------------------------------------------
Function getRandom(m,n)
    Randomize
    getRandom = Int(((n-m+1) * Rnd) + m)
End Function

Function delayAsManual(delayType)
    Select Case delayType  
    Case ENUM_DELAY_TYPE_TOO_SHORT
        Delay 200 + getRandom(-50, 50)
    Case ENUM_DELAY_TYPE_SHORT   
        Delay 700 + getRandom(-250 , 250)
    Case ENUM_DELAY_TYPE_NORMAL_SHORTER   
        Delay 1200 + getRandom(-250, 250)  
    Case ENUM_DELAY_TYPE_NORMAL  
        Delay 2000 + getRandom(-250, 250)   
    Case ENUM_DELAY_TYPE_LONG   
        Delay 3000 + getRandom(-250, 250)   
    Case ENUM_DELAY_TYPE_TOO_LONG   
        Delay 5000 + getRandom(-250, 250)
    Case Else  
        Delay 5000 + getRandom(-5000, 5000)
    End Select  
End Function

Function clickAsManual(x, y, rndXMin, rndXMax, rndYMin, rndYMax)
    MoveTo x + getRandom(rndXMin, rndXMax), y + getRandom(rndYMin, rndYMax)
    LeftClick 1
End Function

Function slideDownAsManual(hWnd, left, top, right, bottom, downRange)
    Dim posX, posY
    posX = left + getRandom(0, right - left)
    posY = top + getRandom(downRange, bottom - top)
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY	
    LeftDown 1
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY - downRange 
    LeftUp 1
    Delay delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
End Function

Function slideUpAsManual(hWnd, left, top, right, bottom, upRange)
    Dim posX, posY
    posX = left + getRandom(0, right - left)
    posY = top + getRandom(0, bottom - top - upRange)
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY
    LeftDown 1
    Delay delayAsManual(ENUM_DELAY_TYPE_TOO_SHORT)
    MoveTo posX, posY + upRange 
    LeftUp 1
    Delay delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
End Function

Function checkPicIsFound(hWnd, left, top, right, bottom, picName, matchParam)
    FindPic left, top, right, bottom, _
		CStr(picName), _
		matchParam, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        checkPicIsFound = TRUE
        Exit Function
    End If	
    checkPicIsFound = FALSE
End Function

Function checkPicIsFoundExSlide(hWnd, left, top, right, bottom, picName, matchParam)
    For SLIDE_MAX
        FindPic left, top, right, bottom, _
		CStr(picName), _
		matchParam, matchedX, matchedY
        If matchedX <> -1 And matchedY <> -1 Then 
            checkPicIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideDownAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  - SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    
    For SLIDE_MAX
        FindPic left, top, right, bottom, _
		CStr(picName), _
		matchParam, matchedX, matchedY
        If matchedX <> -1 And matchedY <> -1 Then 
            checkPicIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideUpAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  + SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    
    checkPicIsFoundExSlide = FALSE
End Function

Function checkColorIsFound(hWnd, left, top, right, bottom, colorBase, colorList, matchParam)
    posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
		colorBase, colorList, matchParam)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        checkColorIsFound = TRUE
        Exit Function
    End If
    
    checkColorIsFound = FALSE
End Function

Function checkColorIsFoundExSlide(hWnd, left, top, right, bottom, colorBase, colorList, matchParam)
    For SLIDE_MAX
        posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
        xyArray = Split(posXY, "|")
        matchedX = CInt(xyArray(0))
        matchedY = CInt(xyArray(1))
        If matchedX <> -1 And matchedY <> -1 Then 
            checkColorIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideDownAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  - SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    
    For SLIDE_MAX
        posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
        xyArray = Split(posXY, "|")
        matchedX = CInt(xyArray(0))
        matchedY = CInt(xyArray(1))
        If matchedX <> -1 And matchedY <> -1 Then 
            checkColorIsFoundExSlide = TRUE
            Exit Function
        End If
        Call slideUpAsManual(hWnd, _
			left + SLIDE_RANGE/2, top  + SLIDE_RANGE/2, _
			right - SLIDE_RANGE/2, bottom  + SLIDE_RANGE/2, SLIDE_RANGE)
        delayAsManual(ENUM_DELAY_TYPE_NORMAL_SHORTER)
    Next
    
    checkColorIsFoundExSlide = FALSE
End Function

Function showMsgBox(msgContent)
    MessageBox msgContent
End Function

Function logClear()
    TeamMode.LogBox.text = ""
End Function

Function logRecord(logLevel, logContent)
    Dim logline
    Select Case logLevel
    Case ENUM_LOG_LEVEL_ERR
        logline = "´íÎó"
    Case ENUM_LOG_LEVEL_WARN
        logline = "¾¯¸æ"
    Case ENUM_LOG_LEVEL_INFO
        logline = "ÐÅÏ¢"
    Case ENUM_LOG_LEVEL_DEBUG
        logline = "µ÷ÊÔ"
    Case Else  
        logline = "ÈÕÖ¾"	
    End Select
    logline = logline + "[" + CStr(Hour(now)) + ":" + CStr(Minute(now)) + ":" + CStr(Second(now)) + "]"
    logline = logline + "------" + CStr(logContent)
    TracePrint logline
    TeamMode.LogBox.text = logline + vbcrlf + TeamMode.LogBox.text
End Function

Function clickPicWhenFound(hWnd, left, top, right, bottom, _
	picName, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)	
    If TRUE <> checkPicIsFound(hWnd, _
			left, top, right, bottom, _
			picName, matchParam) Then
        clickPicWhenFound = FALSE
        Exit Function
    End If
    
    FindPic left, top, right, bottom, _
			picName, matchParam, matchedX, matchedY
    If matchedX = -1 Or matchedY = -1 Then 
        clickPicWhenFound = FALSE
        Exit Function
    End If
    
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickPicWhenFound = TRUE
End Function

Function clickPicWhenFoundExSlide(hWnd, left, top, right, bottom, _
	picName, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)	
    If TRUE <> checkPicIsFoundExSlide(hWnd, _
			left, top, right, bottom, _
			picName, matchParam) Then
        clickPicWhenFoundExSlide = FALSE
        Exit Function
    End If
    FindPic left, top, right, bottom, _
			picName, matchParam, matchedX, matchedY
    If matchedX = -1 Or matchedY = -1 Then 
        clickPicWhenFoundExSlide = FALSE
        Exit Function
    End If
    
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickPicWhenFoundExSlide = TRUE
End Function

Function clickColorsWhenFound(hWnd, left, top, right, bottom, _
	colorBase, colorList, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)
    If TRUE <> checkColorIsFound(hWnd, _
			left, top, right, bottom, _
			colorBase, colorList, matchParam) Then
        clickColorsWhenFound = FALSE
        Exit Function
    End If
    
    posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        clickColorsWhenFound = FALSE
        Exit Function
    End If
    
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickColorsWhenFound = TRUE
End Function

Function clickColorsWhenFoundExSlide(hWnd, left, top, right, bottom, _
	colorBase, colorList, matchParam, _
	rndMinX, rndMaxX, rndMinY, rndMaxY)
    If TRUE <> checkColorIsFoundExSlide(hWnd, _
			left, top, right, bottom, _
			colorBase, colorList, matchParam) Then
        clickColorsWhenFoundExSlide = FALSE
        Exit Function
    End If
    
    posXY = Plugin.Color.FindMutiColor(left, top, right, bottom, _
			colorBase, colorList, matchParam)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        clickColorsWhenFoundExSlide = FALSE
        Exit Function
    End If
    
    Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Call clickAsManual(matchedX, matchedY, rndMinX, rndMaxX, rndMinY, rndMaxY)
    clickColorsWhenFoundExSlide = TRUE
End Function

// º¯Êý¶¨Òå --------------------------------------------------------
Function isWndInvalid(hWnd, left, top, right, bottom)
    sTitle = Plugin.Window.GetText(Hwnd)
    If 0 < InStr(sTitle, WIN_VALID_TITLE) Then 
        isWndInvalid = FALSE
        Exit Function
    End If
    
    If right - left <> 800 Or _
    	bottom - top <> 600 Then
    	Call logRecord(ENUM_LOG_LEVEL_ERR, "·Ö±æÂÊ²»Æ¥Åä")
    	isWndInvalid = FALSE
        Exit Function
    End If
    
    isWndInvalid = TRUE
End Function

Function getCurGhostStatus(hWnd, left, top, right, bottom)  
    // ÊÇ·ñÓÐ¼ÌÐø×½¹íµÄµ¯´°
    FindPic left + REL_CENTER_MSGBOX_POS_LEFT, _
		top + REL_CENTER_MSGBOX_POS_TOP, _
		left + REL_CENTER_MSGBOX_POS_RIGHT, _
		top + REL_CENTER_MSGBOX_POS_BOTTOM, _
		"Attachment:\Confirm_ÊÇ·ñ¼ÌÐø×½¹í.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurGhostStatus = ENUM_STATUS_CONTINUE_CONFIRM
        Exit Function
    End If
    
    // ÊÇ·ñÓÐÆäËûµÄµ¯´°
    FindPic posLeft + REL_CENTER_MSGBOX_POS_LEFT, _
		posTop + REL_CENTER_MSGBOX_POS_TOP, _
		posLeft + REL_CENTER_MSGBOX_POS_RIGHT, _
		posTop + REL_CENTER_MSGBOX_POS_BOTTOM, _
		"Attachment:\Confirm_Èý½çÆæÔµ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
     	getCurGhostStatus = ENUM_STATUS_HAS_OTHER_CONFIRM
        Exit Function
    End If
    
    // ÊÇ·ñÓÐ×¥¹íÈÎÎñµÄ¶Ô»°
    FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_×¥¹íÈÎÎñ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then
        getCurGhostStatus = ENUM_STATUS_CONFIRM_GET_GHOST_TASK
        Exit Function
    End If
    
    // ÊÇ·ñÓÐÈÕ³£»î¶¯°´Å¥
    FindPic left+REL_LEFT_TASKLIST_POS_LEFT, _
		top+REL_LEFT_TASKLIST_POS_TOP, _
		left+REL_LEFT_TASKLIST_POS_RIGHT, _
		top+REL_LEFT_TASKLIST_POS_BOTTOM, _
		"Attachment:\Task_ÈÕ³£»î¶¯.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurGhostStatus = ENUM_STATUS_DIALOG_TASK
        Exit Function
    End If
    
    // ÊÇ·ñ´¦ÓÚÈÕ³£»î¶¯½çÃæ
    FindPic left+REL_LEFT_TASKLIST_POS_LEFT, _
		top+REL_LEFT_TASKLIST_POS_TOP, _
		left+REL_LEFT_TASKLIST_POS_RIGHT, _
		top+REL_LEFT_TASKLIST_POS_BOTTOM, _
		"Attachment:\Task_ÈÕ³£»î¶¯_Active.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurGhostStatus = ENUM_STATUS_DIALOG_TASK_DAYLY
        Exit Function
    End If
    
    // ÊÇ·ñÓÐÐèÒªCloseµÄ¶«Î÷
    FindPic left, top, right, bottom, _
		"Attachment:\Close.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurGhostStatus = ENUM_STATUS_IDEL_WITH_CLOSE
        Exit Function
    End If
    
    FindPic left, top, right, bottom, _
		"Attachment:\Close_Small.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurGhostStatus = ENUM_STATUS_IDEL_WITH_CLOSE
        Exit Function
    End If
    
    // ÊÇ·ñÔÚ¼ÓÔØµØÍ¼
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_USER_POS_LEFT, _
		top + REL_RIGHT_USER_POS_TOP, _
		left + REL_RIGHT_USER_POS_RIGHT, _
		bottom + REL_RIGHT_USER_POS_BOTTOM, _
		FLAG_USER_COLORBASE, FLAG_USER_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        getCurGhostStatus = ENUM_STATUS_LOADING_MAP
        Exit Function
    End If
    
    // ÊÇ·ñÔÚÕ½¶·ÖÐ
    FindPic left + REL_TOP_BAR_POS_LEFT, _
		top + REL_TOP_BAR_POS_TOP, _
		left + REL_TOP_BAR_POS_RIGHT, _
		top + REL_TOP_BAR_POS_BOTTOM, _
		"Attachment:\Idle_¹Ò»ú.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX = -1 Or matchedY = -1 Then 
        getCurGhostStatus = ENUM_STAUTS_BATTLE
        Exit Function
    End If
    
    // ÁÐ±íÊÇ·ñ±»Òþ²Ø
    FindPic left + REL_RIGHT_LIST_TAB_POS_LEFT, _
		top + REL_RIGHT_LIST_TAB_POS_TOP, _
		left + REL_RIGHT_LIST_TAB_POS_RIGHT, _
		top + REL_RIGHT_LIST_TAB_POS_BOTTOM, _
		"Attachment:\ListTab_ÏÔÊ¾.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurGhostStatus = ENUM_STATUS_HIDE_LIST
        Exit Function
    End If
    
    // ÊÇ·ñ´¦ÓÚ¶ÓÎéÁÐ±íÖÐ
    FindPic left + REL_RIGHT_LIST_TAB_POS_LEFT, _
		top + REL_RIGHT_LIST_TAB_POS_TOP, _
		left + REL_RIGHT_LIST_TAB_POS_RIGHT, _
		top + REL_RIGHT_LIST_TAB_POS_BOTTOM, _
		"Attachment:\ListTab_¶ÓÎé.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurGhostStatus = ENUM_STATUS_TEAM_LIST
        Exit Function
    End If
    
    // ÊÇ·ñÓµÓÐ×½¹íÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_GHOST_COLORBASE, TASKLIST_GHOST_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurGhostStatus = ENUM_STATUS_HAS_GHOST_TASK
        Exit Function
    End If
    
    // ÊÇ·ñÓµÓÐÇ§ÄêÀ÷¹íÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_GHOSTKING_COLORBASE, TASKLIST_GHOSTKING_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurGhostStatus = ENUM_STATUS_HAS_GHOSTKING_TASK
        Exit Function
    End If
    
    // ÊÇ·ñ´¦ÓÚIdle½çÃæ
    FindPic left+REL_LEFT_BAR_POS_LEFT, _
		top+REL_LEFT_BAR_POS_TOP, _
		left+REL_LEFT_BAR_POS_RIGHT, _
		top+REL_LEFT_BAR_POS_BOTTOM, _
		"Attachment:\Idle_ÉÌ³Ç.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 Or matchedY <> -1 Then 
        FindPic left+REL_LEFT_BAR_POS_LEFT, _
		top+REL_LEFT_BAR_POS_TOP, _
		left+REL_LEFT_BAR_POS_RIGHT, _
		top+REL_LEFT_BAR_POS_BOTTOM, _
		"Attachment:\Idle_¸£Àû.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
        If matchedX <> - 1  Or matchedY <> - 1  Then 
            getCurGhostStatus = ENUM_STATUS_IDLE
            Exit Function
        End If
    End If
    
    getCurGhostStatus = ENUM_STATUS_UNKOWN
End Function

Function confirmContinue(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓÐ¼ÌÐø×½¹íµÄµ¯´°
    FindPic left + REL_CENTER_MSGBOX_POS_LEFT, _
		top + REL_CENTER_MSGBOX_POS_TOP, _
		left + REL_CENTER_MSGBOX_POS_RIGHT, _
		top + REL_CENTER_MSGBOX_POS_BOTTOM, _
		"Attachment:\Confirm_ÊÇ·ñ¼ÌÐø×½¹í.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        Call logRecord(ENUM_LOG_LEVEL_INFO, "ÌáÊ¾ÊÇ·ñ¼ÌÐø×½¹í, µã»÷È·ÈÏ¼ÌÐø×½¹í")
        Call clickAsManual(matchedX, matchedY, 210, 290, 110, 130)
        confirmContinue = TRUE
        Exit Function
    End If
    
    confirmContinue = FALSE
End Function

Function closeDialogInIdle(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓÐÐèÒªCloseµÄ¶«Î÷
    FindPic left, top, right, bottom, _
		"Attachment:\Close.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        Call logRecord(ENUM_LOG_LEVEL_INFO, "´æÔÚµ¯´°, Îª±ÜÃâÕÚµ²½«Æä¹Ø±Õ")
        Call clickAsManual(matchedX, matchedY, 0, 10, 0, 10)
        closeDialogInIdle = TRUE
        Exit Function
    End If
    
    FindPic left, top, right, bottom, _
		"Attachment:\Close_Small.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        Call logRecord(ENUM_LOG_LEVEL_INFO, "´æÔÚÐ¡µ¯´°, Îª±ÜÃâÕÚµ²½«Æä¹Ø±Õ")
        Call clickAsManual(matchedX, matchedY, 5, 20, 5, 20)
        closeDialogInIdle = TRUE
        Exit Function
    End If
    
    closeDialogInIdle = FALSE
End Function

Function clickGhostTask(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓµÓÐ×½¹íÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_GHOST_COLORBASE, TASKLIST_GHOST_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> - 1  And matchedY <> - 1  Then 
        Call logRecord(ENUM_LOG_LEVEL_DEBUG, "µã»÷×½¹íÈÎÎñÒÔ¼ÌÐø...")
        Call clickAsManual(matchedX, matchedY, 0, 160, 0, 50) 
        clickGhostTask = TRUE
        Exit Function
    End If
    
    clickGhostTask = FALSE
End Function

Function clickGhostKingTask(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓµÓÐÇ§ÄêÀ÷¹íÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_GHOSTKING_COLORBASE, TASKLIST_GHOSTKING_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call logRecord(ENUM_LOG_LEVEL_INFO, "³¤Ê±¼äÎ´¿ªÊ¼×½¹í, µã»÷Ç§ÄêÀ÷¹íÈÎÎñÒÔ¼ÌÐø...")
        Call clickAsManual(matchedX, matchedY, 0, 130, 0, 50) 
        clickGhostKingTask = TRUE
        Exit Function
    End If
    
    clickGhostKingTask = FALSE
End Function

Function confirmGetGhostTask(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓÐ×¥¹íÈÎÎñµÄ¶Ô»°
    FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_×¥¹íÈÎÎñ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        Call logRecord(ENUM_LOG_LEVEL_INFO, "¶Ô»°ÖÐ, È·ÈÏÁìÈ¡×½¹íÈÎÎñ")
        Call clickAsManual(matchedX, matchedY, 0, 200, 0, 30)
        Call delayAsManual(ENUM_DELAY_TYPE_NORMAL)
        Call clickGhostTask(hWnd, left, top, right, bottom)
        confirmGetGhostTask = TRUE
        Exit Function
    End If
    
    confirmGetGhostTask = FALSE
End Function

Function showList(hWnd, left, top, right, bottom)
    // ÁÐ±íÊÇ·ñ±»Òþ²Ø
    FindPic left + REL_RIGHT_LIST_TAB_POS_LEFT, _
		top + REL_RIGHT_LIST_TAB_POS_TOP, _
		left + REL_RIGHT_LIST_TAB_POS_RIGHT, _
		top + REL_RIGHT_LIST_TAB_POS_BOTTOM, _
		"Attachment:\ListTab_ÏÔÊ¾.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1  Then 
        Call clickAsManual(matchedX, matchedY, 0, 10, 0, 20)
        showList = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_ERR, "ÏÔÊ¾ÁÐ±íÊ§°Ü")
    showList = FALSE
End Function

Function switchToTaskList(hWnd, left, top, right, bottom)
    // ÊÇ·ñ´¦ÓÚ¶ÓÎéÁÐ±íÖÐ
    FindPic left + REL_RIGHT_LIST_TAB_POS_LEFT, _
		top + REL_RIGHT_LIST_TAB_POS_TOP, _
		left + REL_RIGHT_LIST_TAB_POS_RIGHT, _
		top + REL_RIGHT_LIST_TAB_POS_BOTTOM, _
		"Attachment:\ListTab_¶ÓÎé.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        Call clickAsManual(matchedX, matchedY, -100, -40, 0, 20)
        switchToTaskList = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_ERR, "ÇÐ»»µ½ÈÎÎñÁÐ±íÊ§°Ü")
    switchToTaskList = FALSE
End Function

Function requestTask(hWnd, left, top, right, bottom)
    FindPic left+REL_TOP_BAR_POS_LEFT, _
		top+REL_TOP_BAR_POS_TOP, _
		left+REL_TOP_BAR_POS_RIGHT, _
		top+REL_TOP_BAR_POS_BOTTOM, _
		"Attachment:\Idle_»î¶¯.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1  Then 
        Call clickAsManual(matchedX, matchedY, -8, 40, -2, 3)
        requestTask = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_ERR, "ÇëÇóÈÎÎñ´°¿ÚÊ§°Ü, Ã»ÓÐÕÒµ½»î¶¯Í¼±ê")
    requestTask = FALSE
End Function

Function requestDailyTask(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓÐÈÕ³£»î¶¯°´Å¥
    FindPic left+REL_LEFT_TASKLIST_POS_LEFT, _
		top+REL_LEFT_TASKLIST_POS_TOP, _
		left+REL_LEFT_TASKLIST_POS_RIGHT, _
		top+REL_LEFT_TASKLIST_POS_BOTTOM, _
		"Attachment:\Task_ÈÕ³£»î¶¯.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 0, 80, 0, 30)
        requestDailyTask = TRUE
        Exit Function
    End If
    
    requestDailyTask = FALSE
End Function

Function requestGhostTask(hWnd, left, top, right, bottom)
    // ÊÇ·ñÓÐ×½¹íÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_GHOST_COLORBASE, TASK_DAYLY_GHOST_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 200, 250, -10, 20)
        requestGhostTask = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_WARN, "ËÑÑ°×½¹íÈÎÎñÊ§°Ü, ³¢ÊÔ»¬¶¯½çÃæÀ´»ñÈ¡ÈÎÎñ")
    If TRUE <> clickColorsWhenFoundExSlide(hWnd, _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_GHOST_COLORBASE, TASK_DAYLY_GHOST_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE, _
		200, 250, -10, 20) Then
		 Call logRecord(ENUM_LOG_LEVEL_WARN, "ÁìÈ¡×½¹íÈÎÎñÊ§°Ü...")
        requestGhostTask = FALSE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_INFO, "ÁìÈ¡×½¹íÈÎÎñ³É¹¦")
    requestGhostTask = TRUE
End Function

Function cancelOtherConfirms(hWnd, left, top, right, bottom)
	FindPic posLeft + REL_CENTER_MSGBOX_POS_LEFT, _
		posTop + REL_CENTER_MSGBOX_POS_TOP, _
		posLeft + REL_CENTER_MSGBOX_POS_RIGHT, _
		posTop + REL_CENTER_MSGBOX_POS_BOTTOM, _
		"Attachment:\Confirm_Èý½çÆæÔµ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 50,140,130,150)
     	cancelOtherConfirm = TRUE
        Exit Function
    End If
    
    cancelOtherConfirm = FALSE
End Function

Function clickInStoryMode(hWnd, left, top, right, bottom)
	FindPic posLeft + REL_RIGHT_USER_POS_LEFT, _
		posTop + REL_RIGHT_USER_POS_TOP, _
		posLeft + REL_RIGHT_USER_POS_RIGHT, _
		posTop + REL_RIGHT_USER_POS_BOTTOM, _
		"Attachment:\Loading_¾çÇé.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, -200, 0, 0, 100)
     	clickInStoryMode = TRUE
        Exit Function
    End If
    
    clickInStoryMode = FALSE
End Function

Function handlerGhostShortStatus(hWnd, left, top, right, bottom, status)
    Select Case status
    Case ENUM_STATUS_IDLE
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "¿ÕÏÐ×´Ì¬")
        
    Case ENUM_STAUTS_BATTLE
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "Õ½¶·ÖÐ")
        
    Case ENUM_STATUS_LOADING_MAP
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "¼ÓÔØµØÍ¼ÖÐ")
        
    Case ENUM_STATUS_HAS_GHOST_TASK
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "×½¹íÖÐ")
        
    Case ENUM_STATUS_HAS_GHOSTKING_TASK
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "×½Ç§ÄêÀ÷¹íÖÐ")
        
    Case ENUM_STATUS_CONTINUE_CONFIRM
        If TRUE <> confirmContinue(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_CONFIRM_GET_GHOST_TASK
        If TRUE <> confirmGetGhostTask(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_HIDE_LIST
        If TRUE <> showList(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_TEAM_LIST
        If TRUE <> switchToTaskList(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK
        If TRUE <> requestDailyTask(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK_DAYLY
        If TRUE <> requestGhostTask(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_HAS_OTHER_CONFIRM
    	If TRUE <> cancelOtherConfirms(hWnd, left, top, right, bottom) Then 
            handlerGhostShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case Else
        //Call logRecord(ENUM_LOG_LEVEL_INFO, "Î´Öª")
        
    End Select
    
    handlerGhostShortStatus = RET_SUCCESS_NORMAL
End Function

Function handlerGhostLongStatus(hWnd, left, top, right, bottom, status)
    Select Case status
    Case ENUM_STATUS_IDLE
        If TRUE <> requestTask(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STAUTS_BATTLE
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "Õ½¶·ÖÐ")
        
    Case ENUM_STATUS_LOADING_MAP
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "¼ÓÔØµØÍ¼ÖÐ")
        
    Case ENUM_STATUS_HAS_GHOST_TASK
        If TRUE <> clickGhostTask(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_HAS_GHOSTKING_TASK
        If TRUE <> clickGhostKingTask(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_CONTINUE_CONFIRM
        If TRUE <> confirmContinue(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_CONFIRM_GET_GHOST_TASK
        If TRUE <> confirmGetGhostTask(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_HIDE_LIST
        If TRUE <> showList(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_TEAM_LIST
        If TRUE <> switchToTaskList(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK
        If TRUE <> requestDailyTask(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK_DAYLY
        If TRUE <> requestGhostTask(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_HAS_OTHER_CONFIRM
    	If TRUE <> cancelOtherConfirms(hWnd, left, top, right, bottom) Then 
            handlerGhostLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case Else
        Call logRecord(ENUM_LOG_LEVEL_INFO, "Î´Öª")
        handlerGhostLongStatus = RET_FAILED
        Exit Function
    End Select
    
    handlerGhostLongStatus = RET_SUCCESS_NORMAL
End Function

Function runAutoGhost(hWnd, left, top, right, bottom, loopNum)
    Dim curFailedNum, curLoopNum, diffNum
    Dim curStatus, lastStatus, curStatusCnt
    
    curFailedNum = curLoopNum = 0
    curStatus = lastStatus = -1
    curStatusCnt = 0
    
    While TRUE
        curStatus = getCurGhostStatus(hWnd, left, top, right, bottom)
        
        // ×´Ì¬¼ÇÂ¼Óë³ÖÐø´ÎÊýÍ³¼Æ
        If lastStatus <> curStatus Then 
            lastStatus = curStatus
            curStatusCnt = 0
        Else 
            curStatusCnt = curStatusCnt + 1
        End If
        
        If curStatus = ENUM_STATUS_CONFIRM_GET_GHOST_TASK And _
			0 = curStatusCnt Then
            curLoopNum = curLoopNum + 1
            If loopNum > 0 Then 
                diffNum = loopNum - curLoopNum
                If diffNum < 0 Then 
                    Call logRecord(ENUM_LOG_LEVEL_INFO, "ÒÑ×½¹í" + CStr(loopNum) + "ÂÖ, ½áÊøÈÎÎñ")
                    runAutoGhost = TRUE
                    Exit Function
                Else 
                    Call logRecord(ENUM_LOG_LEVEL_INFO, "¿ªÊ¼µÚ" + CStr(curLoopNum) + "ÂÖ×½¹í" + "; »¹Ê£ÏÂ" + CStr(diffNum) + "ÂÖ") 	
                End If
            Else 
                Call logRecord(ENUM_LOG_LEVEL_INFO, "¿ªÊ¼µÚ" + CStr(curLoopNum) + "ÂÖ×½¹í")
            End If
        End If
        
        // ¶ÌÔÝ×´Ì¬´¦Àí
        Select Case handlerGhostShortStatus(hWnd, left, top, right, bottom, curStatus)
        	Case RET_SUCCESS_EXIT
            	runAutoGhost = TRUE
            	Exit Function
            	
        	Case RET_SUCCESS_NORMAL
            	// ×´Ì¬¸Ä±ä, ´íÎó¼Æ´ÎÇåÁã
            	curFailedNum = 0
            	
        	Case RET_FAILED
            	curFailedNum = curFailedNum + 1
            	
        	Case Else
            	curFailedNum = curFailedNum + 1
            	
        End Select

        // ÅÐ¶ÏÊÇ·ñÎª³ÖÐø×´Ì¬
        If curStatusCnt > STATUS_KEEP_CNT_MAX Then 
            curStatusCnt = 0
            // ³ÖÐø×´Ì¬´¦Àí
            Select Case handlerGhostLongStatus(hWnd, left, top, right, bottom, curStatus)
            	Case RET_SUCCESS_EXIT
                	runAutoGhost = TRUE
                	Exit Function
                	
            	Case RET_SUCCESS_NORMAL
                	// ×´Ì¬¸Ä±ä, ´íÎó¼Æ´ÎÇåÁã
                	curFailedNum = 0
                	
            	Case RET_FAILED
                	curFailedNum = curFailedNum + 1
                	
            	Case Else
                	curFailedNum = curFailedNum + 1
                	
            End Select
        End If
        
        If curFailedNum > RETRY_CNT_MAX Then 
            // ´íÎó¹ý¶à´¦Àí
            Call logRecord(ENUM_LOG_LEVEL_WARN, "´íÎó¹ý¶à, Í£Ö¹Ö´ÐÐµ±Ç°ÈÎÎñ...")
            runAutoGhost = FALSE
            Exit Function
        End If
        
        // Ëæ»ú¼ä¸ô¼ì²â
        Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Wend
    
    runAutoGhost = TRUE
End Function

Function getCurFBStatus(hWnd, left, top, right, bottom)
	// ÊÇ·ñÊÇ¼ÓÔØ¾çÇéµÄÄ£Ê½
	FindPic posLeft + REL_RIGHT_USER_POS_LEFT, _
		posTop + REL_RIGHT_USER_POS_TOP, _
		posLeft + REL_RIGHT_USER_POS_RIGHT, _
		posTop + REL_RIGHT_USER_POS_BOTTOM, _
		"Attachment:\Loading_¾çÇé.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
     	getCurFBStatus = ENUM_STATUS_LOADING_STORY
        Exit Function
    End If

	// ÊÇ·ñÓÐÆäËûµÄµ¯´°
    FindPic posLeft + REL_CENTER_MSGBOX_POS_LEFT, _
		posTop + REL_CENTER_MSGBOX_POS_TOP, _
		posLeft + REL_CENTER_MSGBOX_POS_RIGHT, _
		posTop + REL_CENTER_MSGBOX_POS_BOTTOM, _
		"Attachment:\Confirm_Èý½çÆæÔµ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
     	getCurFBStatus = ENUM_STATUS_HAS_OTHER_CONFIRM
        Exit Function
    End If

	// ÊÇ·ñÓÐ¸±±¾ÈÎÎñ¶Ô»°
    FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_Ñ¡Ôñ¸±±¾.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then
        getCurFBStatus = ENUM_STATUS_DIALOG_FB_CONFIRM
        Exit Function
    End If

	// ÊÇ·ñÓÐ¸±±¾ÖÐÐèÒªÈ·ÈÏÕ½¶·µÄ¶Ô»°
	FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_¸±±¾ÖÐÈ·ÈÏÕ½¶·.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then
        getCurFBStatus = ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE
        Exit Function
    End If

	FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_ËÍ¹ÏµÄ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then
        getCurFBStatus = ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE
        Exit Function
    End If

	// ÊÇ·ñ´¦ÓÚÆÕÍ¨¸±±¾Ä£Ê½
	FindPic left+REL_TOP_TASKLIST_POS_LEFT, _
    	top+REL_TOP_TASKLIST_POS_TOP, _
		left+REL_TOP_TASKLIST_POS_RIGHT, _
		top+REL_TOP_TASKLIST_POS_BOTTOM, _
		"Attachment:\FB_ÆÕÍ¨.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then
        getCurFBStatus = ENUM_STATUS_IN_FB_NORMAL
        Exit Function
    End If
    
    // ÊÇ·ñÓÐÈÕ³£»î¶¯°´Å¥
    FindPic left+REL_LEFT_TASKLIST_POS_LEFT, _
		top+REL_LEFT_TASKLIST_POS_TOP, _
		left+REL_LEFT_TASKLIST_POS_RIGHT, _
		top+REL_LEFT_TASKLIST_POS_BOTTOM, _
		"Attachment:\Task_ÈÕ³£»î¶¯.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_DIALOG_TASK
        Exit Function
    End If
    
    // ÊÇ·ñ´¦ÓÚÈÕ³£»î¶¯½çÃæ
    FindPic left+REL_LEFT_TASKLIST_POS_LEFT, _
		top+REL_LEFT_TASKLIST_POS_TOP, _
		left+REL_LEFT_TASKLIST_POS_RIGHT, _
		top+REL_LEFT_TASKLIST_POS_BOTTOM, _
		"Attachment:\Task_ÈÕ³£»î¶¯_Active.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_DIALOG_TASK_DAYLY
        Exit Function
    End If
    
    // ÊÇ·ñÓÐÐèÒªCloseµÄ¶«Î÷
    FindPic left, top, right, bottom, _
		"Attachment:\Close.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurFBStatus = ENUM_STATUS_IDEL_WITH_CLOSE
        Exit Function
    End If
    
    FindPic left, top, right, bottom, _
		"Attachment:\Close_Small.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
        getCurFBStatus = ENUM_STATUS_IDEL_WITH_CLOSE
        Exit Function
    End If
    
    // ÊÇ·ñÔÚ¼ÓÔØµØÍ¼
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_USER_POS_LEFT, _
		top + REL_RIGHT_USER_POS_TOP, _
		left + REL_RIGHT_USER_POS_RIGHT, _
		bottom + REL_RIGHT_USER_POS_BOTTOM, _
		FLAG_USER_COLORBASE, FLAG_USER_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX = -1 Or matchedY = -1 Then 
        getCurFBStatus = ENUM_STATUS_LOADING_MAP
        Exit Function
    End If

    // ÁÐ±íÊÇ·ñ±»Òþ²Ø
    FindPic left + REL_RIGHT_LIST_TAB_POS_LEFT, _
		top + REL_RIGHT_LIST_TAB_POS_TOP, _
		left + REL_RIGHT_LIST_TAB_POS_RIGHT, _
		top + REL_RIGHT_LIST_TAB_POS_BOTTOM, _
		"Attachment:\ListTab_ÏÔÊ¾.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_HIDE_LIST
        Exit Function
    End If
    
    // ÊÇ·ñ´¦ÓÚ¶ÓÎéÁÐ±íÖÐ
    FindPic left + REL_RIGHT_LIST_TAB_POS_LEFT, _
		top + REL_RIGHT_LIST_TAB_POS_TOP, _
		left + REL_RIGHT_LIST_TAB_POS_RIGHT, _
		top + REL_RIGHT_LIST_TAB_POS_BOTTOM, _
		"Attachment:\ListTab_¶ÓÎé.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_TEAM_LIST
        Exit Function
    End If
    
    // ¸±±¾ÈÎÎñÊÇ·ñ½áÊø
    // ENUM_STATUS_HAS_FB_FINISHED
    
    // ÊÇ·ñÓµÓÐ¸±±¾ÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_DEMON_COLORBASE, TASKLIST_FB_DEMON_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_HAS_FB_TASK
        Exit Function
    End If
    
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_HELL_COLORBASE, TASKLIST_FB_HELL_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_HAS_FB_TASK
        Exit Function
    End If

	posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_TPXF_COLORBASE, TASKLIST_FB_TPXF_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_HAS_FB_TASK
        Exit Function
    End If

	posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_LJS_COLORBASE, TASKLIST_FB_LJS_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        getCurFBStatus = ENUM_STATUS_HAS_FB_TASK
        Exit Function
    End If
    
    // ÊÇ·ñÔÚÕ½¶·ÖÐ
    FindPic left + REL_TOP_BAR_POS_LEFT, _
		top + REL_TOP_BAR_POS_TOP, _
		left + REL_TOP_BAR_POS_RIGHT, _
		top + REL_TOP_BAR_POS_BOTTOM, _
		"Attachment:\Idle_¹Ò»ú.bmp", _
		PIC_MATCHED_PARAMS, matchedX, matchedY
    If matchedX = -1 Or matchedY = -1 Then 
        getCurFBStatus = ENUM_STAUTS_BATTLE
        Exit Function
    End If
    
    // ÊÇ·ñ´¦ÓÚIdle½çÃæ
    FindPic left+REL_LEFT_BAR_POS_LEFT, _
		top+REL_LEFT_BAR_POS_TOP, _
		left+REL_LEFT_BAR_POS_RIGHT, _
		top+REL_LEFT_BAR_POS_BOTTOM, _
		"Attachment:\Idle_ÉÌ³Ç.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
    If matchedX <> -1 Or matchedY <> -1 Then 
        FindPic left+REL_LEFT_BAR_POS_LEFT, _
		top+REL_LEFT_BAR_POS_TOP, _
		left+REL_LEFT_BAR_POS_RIGHT, _
		top+REL_LEFT_BAR_POS_BOTTOM, _
		"Attachment:\Idle_¸£Àû.bmp", _
		PIC_MATCHED_PARAMS_PRECISE, matchedX, matchedY
        If matchedX <> - 1  Or matchedY <> - 1  Then 
            getCurFBStatus = ENUM_STATUS_IDLE
            Exit Function
        End If
    End If
    
    getCurFBStatus = ENUM_STATUS_UNKOWN
End Function

Function requestFBDemonTask(hWnd, left, top, right, bottom)	
	// ÊÇ·ñÓÐ¸±±¾Í¨ÓÃÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_FB_COMMON_COLORBASE, TASK_DAYLY_FB_COMMON_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 210, 260, -10, 10)
        requestFBDemonTask = TRUE
        Exit Function
    End If


	// ÊÇ·ñÓÐ»ìÊÀÄ§Íõ-ÆÕÍ¨ÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_FB_DEMON_COLORBASE, TASK_DAYLY_FB_DEMON_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 200, 250, -15, 10)
        requestFBDemonTask = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_WARN, "ËÑÑ°¸±±¾ÈÎÎñÊ§°Ü, ³¢ÊÔ»¬¶¯½çÃæÀ´»ñÈ¡ÈÎÎñ")
    If TRUE <> clickColorsWhenFoundExSlide(hWnd, _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_FB_COMMON_COLORBASE, TASK_DAYLY_FB_COMMON_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE, _
		210, 260, -10, 10) Then
		Call logRecord(ENUM_LOG_LEVEL_WARN, "ÁìÈ¡¸±±¾ÈÎÎñÊ§°Ü...")
        requestFBDemonTask = FALSE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_INFO, "ÁìÈ¡¸±±¾ÈÎÎñ³É¹¦")
    requestFBDemonTask = TRUE
End Function

Function confirmToFB(hWnd, left, top, right, bottom)
	// ÊÇ·ñÓÐ¸±±¾ÈÎÎñ¶Ô»°
    FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_Ñ¡Ôñ¸±±¾.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 0, 200, 0, 30)
        confirmToFB = TRUE
        Exit Function
    End If
    
    confirmToFB = FALSE
End Function

Function chooseToFBDemon(hWnd, left, top, right, bottom)
    // ÊÇ·ñ´¦ÓÚÆÕÍ¨¸±±¾Ä£Ê½
	FindPic left+REL_TOP_TASKLIST_POS_LEFT, _
    	top+REL_TOP_TASKLIST_POS_TOP, _
		left+REL_TOP_TASKLIST_POS_RIGHT, _
		top+REL_TOP_TASKLIST_POS_BOTTOM, _
		"Attachment:\FB_ÆÕÍ¨.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 100, 240, 400, 420)
        chooseToFBDemon = TRUE
        Exit Function
    End If
    
    chooseToFBDemon = FALSE
End Function

Function chooseToFBBattle(hWnd, left, top, right, bottom)
	// ÊÇ·ñÓÐ¸±±¾ÖÐÐèÒªÈ·ÈÏÕ½¶·µÄ¶Ô»°
	FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_¸±±¾ÖÐÈ·ÈÏÕ½¶·.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, -180, 0, 0, 30)
        chooseToFBBattle = TRUE
        Exit Function
    End If
    
    FindPic left+REL_DIALOG_POS_LEFT, _
    	top+REL_DIALOG_POS_TOP, _
		left+REL_DIALOG_POS_RIGHT, _
		top+REL_DIALOG_POS_BOTTOM, _
		"Attachment:\Dialog_ËÍ¹ÏµÄ.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then
        Call clickAsManual(matchedX, matchedY, 0, 200, 0, 35)
        chooseToFBBattle = TRUE
        Exit Function
    End If
    
    chooseToFBBattle = FALSE
End Function

Function quitFBMaps(hWnd, left, top, right, bottom)
	quitFBMaps = TRUE
End Function

Function clickFBTask(hWnd, left, top, right, bottom)
	// ÊÇ·ñÓµÓÐ¸±±¾ÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_DEMON_COLORBASE, TASKLIST_FB_DEMON_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 0, 160, 0, 50)
        clickFBTask = TRUE
        Exit Function
    End If
    
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_HELL_COLORBASE, TASKLIST_FB_HELL_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 0, 160, 0, 50)
        clickFBTask = TRUE
        Exit Function
    End If
    
    posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_TPXF_COLORBASE, TASKLIST_FB_TPXF_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 0, 160, 0, 50)
        clickFBTask = TRUE
        Exit Function
    End If

	posXY = Plugin.Color.FindMutiColor( _
		left + REL_RIGHT_TASKLIST_POS_LEFT, _
		top + REL_RIGHT_TASKLIST_POS_TOP, _
		left + REL_RIGHT_TASKLIST_POS_RIGHT, _
		bottom + REL_RIGHT_TASKLIST_POS_BOTTOM, _
		TASKLIST_FB_LJS_COLORBASE, TASKLIST_FB_LJS_COLORLIST, COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 0, 160, 0, 50)
        clickFBTask = TRUE
        Exit Function
    End If
    
    clickFBTask = FALSE
End Function

Function handlerFBDemonShortStatus(hWnd, left, top, right, bottom, status)
    Select Case status    
    Case ENUM_STATUS_HIDE_LIST
        If TRUE <> showList(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_TEAM_LIST
        If TRUE <> switchToTaskList(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK
        If TRUE <> requestDailyTask(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK_DAYLY
        If TRUE <> requestFBDemonTask(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_FB_CONFIRM
    	If TRUE <> confirmToFB(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonShortStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_IN_FB_NORMAL
    	If TRUE <> chooseToFBDemon(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonShortStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE
    	If TRUE <> chooseToFBBattle(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonShortStatus = RET_FAILED
            Exit Function
    	End If

	Case ENUM_STATUS_HAS_OTHER_CONFIRM
    	If TRUE <> cancelOtherConfirms(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If

	Case ENUM_STATUS_LOADING_STORY
		If TRUE <> clickInStoryMode(hWnd, left, top, right, bottom) Then 
            handlerFBDemonShortStatus = RET_FAILED
            Exit Function
        End If

    Case Else
        //Call logRecord(ENUM_LOG_LEVEL_INFO, "Î´Öª")
        
    End Select
    
    handlerFBDemonShortStatus = RET_SUCCESS_NORMAL
End Function

Function handlerFBDemonLongStatus(hWnd, left, top, right, bottom, status)
    Select Case status
    Case ENUM_STATUS_IDLE
        If TRUE <> requestTask(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
  
  	Case ENUM_STAUTS_BATTLE
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "Õ½¶·ÖÐ")
  
    Case ENUM_STATUS_HIDE_LIST
        If TRUE <> showList(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_TEAM_LIST
        If TRUE <> switchToTaskList(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK
        If TRUE <> requestDailyTask(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK_DAYLY
        If TRUE <> requestFBDemonTask(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_FB_CONFIRM
    	If TRUE <> confirmToFB(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonLongStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_IN_FB_NORMAL
    	If TRUE <> chooseToFBDemon(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonLongStatus = RET_FAILED
            Exit Function
    	End If
        
    Case ENUM_STATUS_HAS_FB_TASK
    	If TRUE <> clickFBTask(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonLongStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE
    	If TRUE <> chooseToFBBattle(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonLongStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_FB_FINISHED
    	If TRUE <> quitFBMaps(hWnd, left, top, right, bottom) Then 
    		handlerFBDemonLongStatus = RET_FAILED
            Exit Function
    	End If
    	handlerFBDemonLongStatus = RET_SUCCESS_EXIT
    	Exit Function
    
    Case ENUM_STATUS_HAS_OTHER_CONFIRM
    	If TRUE <> cancelOtherConfirms(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_LOADING_STORY
		If TRUE <> clickInStoryMode(hWnd, left, top, right, bottom) Then 
            handlerFBDemonLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case Else
        Call logRecord(ENUM_LOG_LEVEL_INFO, "Î´Öª×´Ì¬: " + CStr(status))
        handlerFBDemonLongStatus = RET_FAILED
        Exit Function
    End Select
    
    handlerFBDemonLongStatus = RET_SUCCESS_NORMAL
End Function

Function chooseToFBHell(hWnd, left, top, right, bottom)
	// ÊÇ·ñ´¦ÓÚÆÕÍ¨¸±±¾Ä£Ê½
	FindPic left+REL_TOP_TASKLIST_POS_LEFT, _
    	top+REL_TOP_TASKLIST_POS_TOP, _
		left+REL_TOP_TASKLIST_POS_RIGHT, _
		top+REL_TOP_TASKLIST_POS_BOTTOM, _
		"Attachment:\FB_ÆÕÍ¨.bmp", PIC_MATCHED_PARAMS_PRECISE, _
		matchedX, matchedY
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call clickAsManual(matchedX, matchedY, 470, 610, 400, 420)
        chooseToFBHell = TRUE
        Exit Function
    End If
    
    chooseToFBHell = FALSE
End Function

Function requestFBHellTask(hWnd, left, top, right, bottom)
	// ÊÇ·ñÓÐ¸±±¾Í¨ÓÃÈÎÎñ
    posXY = Plugin.Color.FindMutiColor( _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_FB_COMMON_COLORBASE, TASK_DAYLY_FB_COMMON_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> -1 And matchedY <> -1 Then 
        Call clickAsManual(matchedX, matchedY, 210, 260, -10, 10)
        requestFBHellTask = TRUE
        Exit Function
    End If

	// ÊÇ·ñÓÐµØ¸®ËÍ¹Ï-ÆÕÍ¨ÈÎÎñ
	Call logRecord(ENUM_LOG_LEVEL_INFO, "ÁìÈ¡¸±±¾ÈÎÎñÖÐ...") 
    posXY = Plugin.Color.FindMutiColor( _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_FB_HELL_COLORBASE, TASK_DAYLY_FB_HELL_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE)
    xyArray = Split(posXY, "|")
    matchedX = CInt(xyArray(0))
    matchedY = CInt(xyArray(1))
    If matchedX <> - 1  And matchedY <> - 1  Then 
    	Call logRecord(ENUM_LOG_LEVEL_INFO, "ÁìÈ¡¸±±¾ÈÎÎñ³É¹¦")
        Call clickAsManual(matchedX, matchedY, 200, 250, -15, 10)
        requestFBHellTask = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_WARN, "ËÑÑ°¸±±¾ÈÎÎñÊ§°Ü, ³¢ÊÔ»¬¶¯½çÃæÀ´»ñÈ¡ÈÎÎñ")
    If TRUE <> clickColorsWhenFoundExSlide(hWnd, _
		left+REL_CENTER_TASKLIST_POS_LEFT, _
		top+REL_CENTER_TASKLIST_POS_TOP, _
		left+REL_CENTER_TASKLIST_POS_RIGHT, _
		top+REL_CENTER_TASKLIST_POS_BOTTOM, _
		TASK_DAYLY_FB_COMMON_COLORBASE, TASK_DAYLY_FB_COMMON_COLORLIST, _
		COLORS_MATCHED_PARAMS_PRECISE, _
		210, 260, -10, 10) Then
		Call logRecord(ENUM_LOG_LEVEL_WARN, "ÁìÈ¡¸±±¾ÈÎÎñÊ§°Ü...")
        requestFBHellTask = TRUE
        Exit Function
    End If
    
    Call logRecord(ENUM_LOG_LEVEL_INFO, "ÁìÈ¡¸±±¾ÈÎÎñ³É¹¦")
    requestFBHellTask = FALSE
End Function

Function runAutoFBDemon(hWnd, left, top, right, bottom)
	Dim curFailedNum
    Dim curStatus, lastStatus, curStatusCnt
    Dim alreadyInFbFlag
    
    curFailedNum = 0
    curStatus = lastStatus = -1
    curStatusCnt = 0
    alreadyInFbFlag = FALSE
    
	While TRUE
    	curStatus = getCurFBStatus(hWnd, left, top, right, bottom)
    	 // ÅÐ¶Ïµ±Ç°ÈÎÎñÊÇ·ñ½áÊø
        If curStatus = ENUM_STATUS_DIALOG_FB_CONFIRM And _
        	TRUE = alreadyInFbFlag Then 
        	/*
        	ÒÑ¾­½øÈë¹ý¸±±¾, µ«ÓÖ³öÏÖÑ¡Ôñ¸±±¾µÄ¶Ô»°, Ôò¿ÉÊÓÎª¸±±¾
        	ÒÑ¾­Íê³É
        	*/
        	Call logRecord(ENUM_LOG_LEVEL_DEBUG, "¸±±¾Ö´ÐÐÍê±Ï...")
			runAutoFBDemon = TRUE
            Exit Function
        End If
        
       
        If lastStatus = ENUM_STATUS_IN_FB_NORMAL And _
        	curStatus = ENUM_STATUS_LOADING_MAP Then
        	/* 
        	Ö®Ç°×´Ì¬ÎªÆÕÍ¨¸±±¾, ¶øÖ®ºó×´Ì¬Îª¼ÓÔØµØÍ¼, Ôò¿ÉÒÔÊÓÎª
        	½øÈë¸±±¾
        	*/
        	Call logRecord(ENUM_LOG_LEVEL_DEBUG, "½øÈë¸±±¾ÖÐ...")
        	alreadyInFbFlag = TRUE
        End If
              
        // ×´Ì¬¼ÇÂ¼Óë³ÖÐø´ÎÊýÍ³¼Æ
        If lastStatus <> curStatus Then 
            lastStatus = curStatus
            curStatusCnt = 0
        Else 
            curStatusCnt = curStatusCnt + 1
        End If
    	
    	
        // ¶ÌÔÝ×´Ì¬´¦Àí
        Select Case handlerFBDemonShortStatus(hWnd, left, top, right, bottom, curStatus)
        	Case RET_SUCCESS_EXIT
            	runAutoFBDemon = TRUE
            	Exit Function
            	
        	Case RET_SUCCESS_NORMAL
            	// ×´Ì¬¸Ä±ä, ´íÎó¼Æ´ÎÇåÁã
            	curFailedNum = 0
            	
        	Case RET_FAILED
            	curFailedNum = curFailedNum + 1
            	
        	Case Else
            	curFailedNum = curFailedNum + 1
            	
        End Select
        
        // ÅÐ¶ÏÊÇ·ñÎª³ÖÐø×´Ì¬
        If curStatusCnt > STATUS_KEEP_CNT_MAX Then 
            curStatusCnt = 0
            // ³ÖÐø×´Ì¬´¦Àí
            Select Case handlerFBDemonLongStatus(hWnd, left, top, right, bottom, curStatus)
            	Case RET_SUCCESS_EXIT
                	runAutoFBDemon = TRUE
                	Exit Function
                	
            	Case RET_SUCCESS_NORMAL
                	// ×´Ì¬¸Ä±ä, ´íÎó¼Æ´ÎÇåÁã
                	curFailedNum = 0
                	
            	Case RET_FAILED
                	curFailedNum = curFailedNum + 1
                	
            	Case Else
                	curFailedNum = curFailedNum + 1
                	
            End Select
        End If
        
        If curFailedNum > RETRY_CNT_MAX Then 
            // ´íÎó¹ý¶à´¦Àí
            Call logRecord(ENUM_LOG_LEVEL_WARN, "´íÎó¹ý¶à, Í£Ö¹Ö´ÐÐµ±Ç°ÈÎÎñ...")
            runAutoFBDemon = FALSE
            Exit Function
        End If
        
        // Ëæ»ú¼ä¸ô¼ì²â
        Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Wend
    
    runAutoFBDemon = TRUE
End Function

Function handlerFBHellShortStatus(hWnd, left, top, right, bottom, status)
	Select Case status    
    Case ENUM_STATUS_HIDE_LIST
        If TRUE <> showList(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_TEAM_LIST
        If TRUE <> switchToTaskList(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK
        If TRUE <> requestDailyTask(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK_DAYLY
        If TRUE <> requestFBHellTask(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_FB_CONFIRM
    	If TRUE <> confirmToFB(hWnd, left, top, right, bottom) Then 
    		handlerFBHellShortStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_IN_FB_NORMAL
    	If TRUE <> chooseToFBHell(hWnd, left, top, right, bottom) Then 
    		handlerFBHellShortStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE
    	If TRUE <> chooseToFBBattle(hWnd, left, top, right, bottom) Then 
    		handlerFBHellShortStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_OTHER_CONFIRM
    	If TRUE <> cancelOtherConfirms(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_LOADING_STORY
		If TRUE <> clickInStoryMode(hWnd, left, top, right, bottom) Then 
            handlerFBHellShortStatus = RET_FAILED
            Exit Function
        End If
        
    Case Else
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "Î´Öª")
        
    End Select
    
    handlerFBHellShortStatus = RET_SUCCESS_NORMAL
End Function

Function handlerFBHellLongStatus(hWnd, left, top, right, bottom, status)
	Select Case status
    Case ENUM_STATUS_IDLE
        If TRUE <> requestTask(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
  
  	Case ENUM_STAUTS_BATTLE
        // Call logRecord(ENUM_LOG_LEVEL_INFO, "Õ½¶·ÖÐ")
  
    Case ENUM_STATUS_HIDE_LIST
        If TRUE <> showList(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_TEAM_LIST
        If TRUE <> switchToTaskList(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK
        If TRUE <> requestDailyTask(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_TASK_DAYLY
        If TRUE <> requestFBHellTask(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_IDEL_WITH_CLOSE
        If TRUE <> closeDialogInIdle(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case ENUM_STATUS_DIALOG_FB_CONFIRM
    	If TRUE <> confirmToFB(hWnd, left, top, right, bottom) Then 
    		handlerFBHellLongStatus = RET_FAILED
            Exit Function
    	End If  
    
    Case ENUM_STATUS_IN_FB_NORMAL
    	If TRUE <> chooseToFBHell(hWnd, left, top, right, bottom) Then 
    		handlerFBHellLongStatus = RET_FAILED
            Exit Function
    	End If
        
    Case ENUM_STATUS_HAS_FB_TASK
    	If TRUE <> clickFBTask(hWnd, left, top, right, bottom) Then 
    		handlerFBHellLongStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_FB_DIALOG_TO_BATTLE
    	If TRUE <> chooseToFBBattle(hWnd, left, top, right, bottom) Then 
    		handlerFBHellLongStatus = RET_FAILED
            Exit Function
    	End If
    
    Case ENUM_STATUS_HAS_FB_FINISHED
    	If TRUE <> quitFBMaps(hWnd, left, top, right, bottom) Then 
    		handlerFBHellLongStatus = RET_FAILED
            Exit Function
    	End If
    	handlerFBHellLongStatus = RET_SUCCESS_EXIT
    	Exit Function
    
    Case ENUM_STATUS_HAS_OTHER_CONFIRM
    	If TRUE <> cancelOtherConfirms(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
    
    Case ENUM_STATUS_LOADING_STORY
		If TRUE <> clickInStoryMode(hWnd, left, top, right, bottom) Then 
            handlerFBHellLongStatus = RET_FAILED
            Exit Function
        End If
        
    Case Else
        //Call logRecord(ENUM_LOG_LEVEL_INFO, "Î´Öª")
        handlerFBHellLongStatus = RET_FAILED
        Exit Function
    End Select
    
    handlerFBHellLongStatus = RET_SUCCESS_NORMAL
End Function

Function runAutoFBHell(hWnd, left, top, right, bottom)
	Dim curFailedNum
    Dim curStatus, lastStatus, curStatusCnt
    Dim alreadyInFbFlag
    
    curFailedNum = 0
    curStatus = lastStatus = -1
    curStatusCnt = 0
    alreadyInFbFlag = FALSE
	While TRUE
    	curStatus = getCurFBStatus(hWnd, left, top, right, bottom)
    	// ÅÐ¶Ïµ±Ç°ÈÎÎñÊÇ·ñ½áÊø
        If curStatus = ENUM_STATUS_DIALOG_FB_CONFIRM And _
        	TRUE = alreadyInFbFlag Then 
        	/*
        	ÒÑ¾­½øÈë¹ý¸±±¾, µ«ÓÖ³öÏÖÑ¡Ôñ¸±±¾µÄ¶Ô»°, Ôò¿ÉÊÓÎª¸±±¾
        	ÒÑ¾­Íê³É
        	*/
        	Call logRecord(ENUM_LOG_LEVEL_DEBUG, "¸±±¾Ö´ÐÐÍê±Ï...")
			runAutoFBHell = TRUE
            Exit Function
        End If
        
       
        If lastStatus = ENUM_STATUS_IN_FB_NORMAL And _
        	curStatus = ENUM_STATUS_LOADING_MAP Then
        	/* 
        	Ö®Ç°×´Ì¬ÎªÆÕÍ¨¸±±¾, ¶øÖ®ºó×´Ì¬Îª¼ÓÔØµØÍ¼, Ôò¿ÉÒÔÊÓÎª
        	½øÈë¸±±¾
        	*/
        	Call logRecord(ENUM_LOG_LEVEL_DEBUG, "½øÈë¸±±¾ÖÐ...")
        	alreadyInFbFlag = TRUE
        End If
        
        // ×´Ì¬¼ÇÂ¼Óë³ÖÐø´ÎÊýÍ³¼Æ
        If lastStatus <> curStatus Then 
            lastStatus = curStatus
            curStatusCnt = 0
        Else 
            curStatusCnt = curStatusCnt + 1
        End If
    	
        // ¶ÌÔÝ×´Ì¬´¦Àí
        Select Case handlerFBHellShortStatus(hWnd, left, top, right, bottom, curStatus)
        	Case RET_SUCCESS_EXIT
            	runAutoFBHell = TRUE
            	Exit Function
            	
        	Case RET_SUCCESS_NORMAL
            	// ×´Ì¬¸Ä±ä, ´íÎó¼Æ´ÎÇåÁã
            	curFailedNum = 0
            	
        	Case RET_FAILED
            	curFailedNum = curFailedNum + 1
            	
        	Case Else
            	curFailedNum = curFailedNum + 1
            	
        End Select
            
        // ÅÐ¶ÏÊÇ·ñÎª³ÖÐø×´Ì¬
        If curStatusCnt > STATUS_KEEP_CNT_MAX Then 
            curStatusCnt = 0
            // ³ÖÐø×´Ì¬´¦Àí
            Select Case handlerFBHellLongStatus(hWnd, left, top, right, bottom, curStatus)
            	Case RET_SUCCESS_EXIT
                	runAutoFBHell = TRUE
                	Exit Function
                	
            	Case RET_SUCCESS_NORMAL
                	// ×´Ì¬¸Ä±ä, ´íÎó¼Æ´ÎÇåÁã
                	curFailedNum = 0
                	
            	Case RET_FAILED
                	curFailedNum = curFailedNum + 1
                	
            	Case Else
                	curFailedNum = curFailedNum + 1
                	
            End Select
        End If
        
        If curFailedNum > RETRY_CNT_MAX Then 
            // ´íÎó¹ý¶à´¦Àí
            Call logRecord(ENUM_LOG_LEVEL_WARN, "´íÎó¹ý¶à, Í£Ö¹Ö´ÐÐµ±Ç°ÈÎÎñ...")
            runAutoFBHell = FALSE
            Exit Function
        End If
        
        // Ëæ»ú¼ä¸ô¼ì²â
        Call delayAsManual(ENUM_DELAY_TYPE_SHORT)
    Wend
    
    runAutoFBHell = TRUE
End Function

Function getGhostLoopNum()
	Select Case TeamMode.ComboBoxGhost.ListIndex
    Case 0
        getGhostLoopNum = - 1 
    Case 1
        getGhostLoopNum = 5
    Case 2
        getGhostLoopNum = 10
    Case 3
        getGhostLoopNum = 20
    Case 4
        getGhostLoopNum = 50
    End Select
End Function

Function isFBDemonEnable()
	If 1 = TeamMode.CheckBoxFB_Demon.Value Then 
		isFBDemonEnable = TRUE
	Else 
		isFBDemonEnable = FALSE
	End If
End Function

Function isFBHellEnable()
	If 1 = TeamMode.CheckBoxFB_Hell.Value Then 
		isFBHellEnable = TRUE
	Else 
		isFBHellEnable = FALSE
	End If
End Function

Function isGhostEnable()
	If 1 = TeamMode.CheckBoxGhost.Value Then 
		isGhostEnable = TRUE
	Else 
		isGhostEnable = FALSE
	End If
End Function

Function getTaskDescription(taskIndex)
	Select Case taskIndex
		Case TASKID_FB_DEMON
			getTaskDescription = TeamMode.CheckBoxFB_Demon.Caption
			
		Case TASKID_FB_HELL
			getTaskDescription = TeamMode.CheckBoxFB_Hell.Caption
			
		Case TASKID_FB_GHOST
			getTaskDescription = TeamMode.CheckBoxGhost.Caption
		
		Case Else 
			getTaskDescription = "Î´Öª"
	End Select
End Function

Function isTaskEnable(taskIndex)
	Select Case taskIndex
		Case TASKID_FB_DEMON
			isTaskEnable = isFBDemonEnable()
			
		Case TASKID_FB_HELL
			isTaskEnable = isFBHellEnable()
			
		Case TASKID_FB_GHOST
			isTaskEnable = isGhostEnable()
		
		Case Else 
			isTaskEnable = FALSE
	End Select
End Function

Function runAutoTask(hWnd, left, top, right, bottom, taskIndex)
	Select Case taskIndex
		Case TASKID_FB_DEMON
			// Ä§Íõ, ÌìÅî
			runAutoTask = runAutoFBDemon(hWnd, left, top, right, bottom)
			
		Case TASKID_FB_HELL
			// µØ¹Ï, Á½½ç
			runAutoTask = runAutoFBHell(hWnd, left, top, right, bottom)
			
		Case TASKID_FB_GHOST
			// ×Ô¶¯×½¹í
    		runAutoTask = runAutoGhost(hWnd, left, top, right, bottom, getGhostLoopNum())
    		
		Case Else 
			runAutoTask = FALSE
	End Select
	
End Function

Function main()
    hCurWnd = Plugin.Window.GetKeyFocusWnd()
    If isNull(hCurWnd) Then
        Call logRecord(ENUM_LOG_LEVEL_ERR, "ÔËÐÐÊ§°Ü, ·Ç·¨µÄ³ÌÐò´°¿Ú")
        main = FALSE
        Exit Function
    End If
    
    sCurRect =Plugin.Window.GetClientRect(hCurWnd)
    If -1 = sCurRect Then
        Call logRecord(ENUM_LOG_LEVEL_ERR, "ÔËÐÐÊ§°Ü, ·Ç·¨µÄ³ÌÐò´°¿Ú")
        main = FALSE
        Exit Function
    End If
    
	arrRect = Split(sCurRect, "|")
    posLeft = Clng(arrRect(0))
    posTop = Clng(arrRect(1))
    posRight = Clng(arrRect(2))
    posBottom = Clng(arrRect(3))
    Call logRecord(ENUM_LOG_LEVEL_DEBUG, "´°¿Ú×ø±êÎª " + _
		arrRect(0) + " " + arrRect(1) + " " + _
		arrRect(2) + " " + arrRect(3))
		
    If isWndInvalid(hCurWnd, posLeft, posTop, posRight, posBottom) Then 
        Call logRecord(ENUM_LOG_LEVEL_ERR, "ÔËÐÐÊ§°Ü, ·Ç·¨µÄ³ÌÐò´°¿Ú")
        main = FALSE
        Exit Function
    End If
      
    For taskIndex = 0 To (SUPPORT_TASK_NUMBER - 1)
    	If TRUE = isTaskEnable(taskIndex) Then 
    		Call logRecord(ENUM_LOG_LEVEL_INFO, "¿ªÊ¼Ö´ÐÐ[" + getTaskDescription(taskIndex) + "]ÈÎÎñ")
    		
    		If TRUE <> runAutoTask(hCurWnd, _
    			posLeft, posTop, posRight, posBottom, _
    			taskIndex) Then 
    			Call logRecord(ENUM_LOG_LEVEL_ERR, "Ö´ÐÐ[" + getTaskDescription(taskIndex) + "]ÈÎÎñÊ§°Ü")
    		Else 
    			Call logRecord(ENUM_LOG_LEVEL_INFO, "Ö´ÐÐ[" + getTaskDescription(taskIndex) + "]ÈÎÎñÍê±Ï")
    		End If
    	End If
    Next
End Function

// ÊÂ¼þ´¥·¢ --------------------------------------------------------
Event TeamMode.CheckBoxGhost.Click
	If 1 = TeamMode.CheckBoxGhost.Value Then 
		TeamMode.ComboBoxGhost.Enabled = TRUE
	Else 
		TeamMode.ComboBoxGhost.Enabled = FALSE
	End If
End Event

Sub OnScriptLoad()   
    TeamMode.LogBox.text = ""
End Sub 

Sub OnScriptExit()  
    Call logRecord(ENUM_LOG_LEVEL_WARN, "³ÌÐòÒÑ½áÊøÔËÐÐ")
    TeamMode.LogBox.text = vbcrlf + "#########################" + vbcrlf + TeamMode.LogBox.text
End Sub

Sub OnScriptPause()  
    Call logRecord(ENUM_LOG_LEVEL_WARN, "³ÌÐòÒÑÔÝÍ£!")
End Sub

Sub OnScriptResume() 
    Call logRecord(ENUM_LOG_LEVEL_WARN, "³ÌÐòÒÑ¼ÌÐøÖ´ÐÐ...")
End Sub

// Ö÷³ÌÐò ----------------------------------------------------------
Call main()

